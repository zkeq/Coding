<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZkeqのCoding日志</title>
  
  <subtitle>Python Java Html 都在学</subtitle>
  <link href="https://code.maylove.pub/atom.xml" rel="self"/>
  
  <link href="https://code.maylove.pub/"/>
  <updated>2021-11-03T15:23:02.439Z</updated>
  <id>https://code.maylove.pub/</id>
  
  <author>
    <name>Zkeq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 学生信息库的优化</title>
    <link href="https://code.maylove.pub/2021/0f57d23da0bb/"/>
    <id>https://code.maylove.pub/2021/0f57d23da0bb/</id>
    <published>2021-11-03T15:17:06.000Z</published>
    <updated>2021-11-03T15:23:02.439Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="学生信息库的优化"><a href="#学生信息库的优化" class="headerlink" title="学生信息库的优化"></a>学生信息库的优化</h3><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-3/3.png" alt="3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    学生信息库</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentInfo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, students</span>):</span></span><br><span class="line">        self.students = students</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_by_id</span>(<span class="params">self, student_id</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.students.get(student_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_students</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> id_, value <span class="keyword">in</span> self.students.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;学号: &#123;&#125;,姓名&#123;&#125;,年龄&#123;&#125;,性别&#123;&#125;,班级&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                id_, value[<span class="string">&#x27;name&#x27;</span>], value[<span class="string">&#x27;age&#x27;</span>], value[<span class="string">&#x27;sex&#x27;</span>], value[<span class="string">&#x27;class_number&#x27;</span>]</span><br><span class="line">            ))</span><br><span class="line">        <span class="keyword">return</span> self.students</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, **student</span>):</span></span><br><span class="line">        check = self.check_user_info(**student)</span><br><span class="line">        <span class="keyword">if</span> check != <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(check)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__add(**student)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adds</span>(<span class="params">self, new_students</span>):</span></span><br><span class="line">        <span class="keyword">for</span> student <span class="keyword">in</span> new_students:</span><br><span class="line">            check = self.check_user_info(**student)</span><br><span class="line">            <span class="keyword">if</span> check != <span class="literal">True</span>:</span><br><span class="line">                <span class="built_in">print</span>(check, student.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.__add(**student)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add</span>(<span class="params">self, **student</span>):</span></span><br><span class="line">        new_id = <span class="built_in">max</span>(self.students) + <span class="number">1</span></span><br><span class="line">        self.students[new_id] = student</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, student_id</span>):</span></span><br><span class="line">        <span class="keyword">if</span> student_id <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;并不存在&#x27;</span>.<span class="built_in">format</span>(student_id))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_info = self.students.pop(student_id)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;学号是&#123;&#125;, &#123;&#125;同学的信息已经被删除了&#x27;</span>.<span class="built_in">format</span>(student_id, user_info[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deletes</span>(<span class="params">self, ids</span>):</span></span><br><span class="line">        <span class="keyword">for</span> id_ <span class="keyword">in</span> ids:</span><br><span class="line">            <span class="keyword">if</span> id_ <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;id_&#125;</span>不存在学生库中&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            student_info = self.students.pop(id_)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;学号<span class="subst">&#123;id_&#125;</span> 学生<span class="subst">&#123;student_info[<span class="string">&quot;name&quot;</span>]&#125;</span> 已被移除&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, student_id, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> student_id <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;并不存在这个学号:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(student_id))</span><br><span class="line"></span><br><span class="line">        check = self.check_user_info(**kwargs)</span><br><span class="line">        <span class="keyword">if</span> check != <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(check)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.students[student_id] = kwargs</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;同学信息更新完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updates</span>(<span class="params">self, update_students</span>):</span></span><br><span class="line">        <span class="keyword">for</span> student <span class="keyword">in</span> update_students:</span><br><span class="line">            id_ = <span class="built_in">list</span>(student.keys())[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> id_ <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;学号<span class="subst">&#123;id_&#125;</span>不存在&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            user_info = student[id_]</span><br><span class="line">            check = self.check_user_info(**user_info)</span><br><span class="line">            <span class="keyword">if</span> check != <span class="literal">True</span>:</span><br><span class="line">                <span class="built_in">print</span>(check)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.students[id_] = user_info</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;所有用户信息更新完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_users</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        values = <span class="built_in">list</span>(self.students.values())</span><br><span class="line">        key = <span class="literal">None</span></span><br><span class="line">        value = <span class="literal">None</span></span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;sex&#x27;</span></span><br><span class="line">            value = kwargs[<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;class_number&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;class_number&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;age&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;没有发现搜索的关键字&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> values:  <span class="comment"># [&#123;name, sex, age, class_number&#125;, &#123;&#125;]</span></span><br><span class="line">            <span class="comment"># print(user[key])</span></span><br><span class="line">            <span class="comment"># print(value)</span></span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">in</span> user[key]:</span><br><span class="line">                result.append(user)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_user_info</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;没有发现学生姓名&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;没有发现学生年龄&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;没有发现学生性别&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;class_number&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;没有发现学生班级&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dewei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小慕&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小曼&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">4</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小高&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">5</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小云&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    students_info = StudentInfo(students)</span><br><span class="line">    user = students_info.get_by_id(<span class="number">1</span>)</span><br><span class="line">    students_info.add(name=<span class="string">&#x27;dewei&#x27;</span>, age=<span class="number">34</span>, class_number=<span class="string">&#x27;A&#x27;</span>, sex=<span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(students_info.students)</span></span><br><span class="line">    users = [</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaohong&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    students_info.adds(users)</span><br><span class="line">    students_info.get_all_students()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">    students_info.deletes([<span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">    students_info.get_all_students()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">    students_info.updates([</span><br><span class="line">        &#123;<span class="number">1</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dewei.zhang&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小慕同学&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;&#125;</span><br><span class="line">    ])</span><br><span class="line">    students_info.get_all_students()</span><br><span class="line">    result = students_info.search_users(name=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    result = students_info.search_users(name=<span class="string">&#x27;小&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 如果同学想用年龄字段模糊查询,</span></span><br><span class="line">    <span class="comment"># 需要把年龄改为str类型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---------------&#x27;</span>)</span><br><span class="line">    result = students_info.search_users(name=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要利用所学知识&lt;br&gt;对前面所写的项目进行了优化</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习（十六）</title>
    <link href="https://code.maylove.pub/2021/a8e53dc8cea3/"/>
    <id>https://code.maylove.pub/2021/a8e53dc8cea3/</id>
    <published>2021-11-03T15:16:19.000Z</published>
    <updated>2021-11-03T15:22:03.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h4><blockquote><p>圆形、长方形除了是几何学科中的基本图形之外，也还是我们日常生活中最常见的平面图形。请根据面向对象的相关知识，将上述两种平面图形用Python语言进行表示，使得我们的程序可以正常对其使用。<br>效果图如下：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-3/2.png" alt="2"></p></blockquote><h5 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h5><ol><li>自定义Point类，并重写其构造（初始化）方法__init__( )，将参数x和y赋值给实例对象的属性</li><li>自定义该类实例方法string( )，功能：打印“{X：xx, Y：xx}”</li><li>自定义Circle类，继承自Point类，并重写其构造（初始化）方法__init__( )，x、y参数通过调用父类的构造函数进行赋值，radius通过子类重写的 <strong>init</strong>( )进行赋值。</li><li>自定义该类实例方法string( )，功能：打印“该图形初始化点为：{X：xx, Y：xx}; {半径为：xx}”</li><li>自定义Size类，并重写其构造（初始化）方法__init__( )，将参数width和height赋值给实例对象的属性</li><li>自定义该类实例方法string( )，功能：打印“{Width：xx, Height：xx}”</li><li>自定义Rectangle类，继承自Point类和Size类，并重写其构造（初始化）方法__init__( )，x、y、width、height 4个参数全部通过调用父类的构造函数进行赋值</li><li>自定义该类实例方法string( )，功能：打印“该图形初始化点为：{X：xx, Y：xx}; 长宽分别为：{Width：xx, Height：xx}</li><li>初始化Circle类的对象c，并调用其格式化输出函数string( )</li><li>初始化Rectangle类的对象r1、r2,并分别调用其格式化输出函数string( )</li></ol><h5 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h5><ol><li>在自定义Rectangle类的构造方法时，调用父类方法必须按照类名.<strong>init</strong>(参数列表)的方式进行调用，如Point.<strong>init</strong>(self, x, y)</li><li>自定义Rectangle类格式化输出方法时，调用父类的格式化输出函数string()</li></ol><h5 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="comment"># 自定义Point类的构造(初始化)方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Point类对象的格式化输出函数(string())</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>(<span class="params">Point</span>):</span></span><br><span class="line"><span class="comment"># 自定义Circle类的构造(初始化)方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Circle类对象的格式化输出函数(string())</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="comment"># 自定义Size类的构造(初始化)方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Size类对象的格式化输出函数(string())</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>(<span class="params">Point, Size</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Rectangle类的构造(初始化)方法，并在方法中调用父类的初始化方法以完成初</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Rectangle类对象的格式化输出函数(string()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="comment"># 实例化Circle对象，圆心为（5,5），半径为8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化Rectangle对象，顶点位置（15,15），长和宽</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化Rectangle对象，顶点位置（40,30），长和宽</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="代码提交区"><a href="#代码提交区" class="headerlink" title="代码提交区"></a>代码提交区</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 自定义Point类的构造(初始化)方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">    <span class="comment"># 自定义Point类对象的格式化输出函数(string())</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">string</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;X:&#123;0&#125;,Y:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(self.x, self.y))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>(<span class="params">Point</span>):</span></span><br><span class="line">    <span class="comment"># 自定义Circle类的构造(初始化)方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, radius</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(x, y)</span><br><span class="line">        self.radius = radius</span><br><span class="line">    <span class="comment"># 自定义Circle类对象的格式化输出函数(string())</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">string</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该图像的初始化点为:X&#123;0&#125;,Y&#123;1&#125;,半径为&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(self.x, self.y,self.radius))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 自定义Size类的构造(初始化)方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, width, height</span>):</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    <span class="comment"># 自定义Size类对象的格式化输出函数(string())</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">string</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;width:&#123;0&#125;,height:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(self.width, self.height))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>(<span class="params">Point, Size</span>):</span></span><br><span class="line">    <span class="comment"># 自定义Rectangle类的构造(初始化)方法，并在方法中调用父类的初始化方法以完成初</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, width, height</span>):</span></span><br><span class="line">        Point.__init__(self, x, y)</span><br><span class="line">        Size.__init__(self, width, height)</span><br><span class="line">    <span class="comment"># 自定义Rectangle类对象的格式化输出函数(string())</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">string</span>(<span class="params">self</span>):</span></span><br><span class="line">        Point.string(self)</span><br><span class="line">        Size.string(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 实例化Circle对象，圆心为（5,5），半径为8</span></span><br><span class="line">    circle = Circle(<span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>)</span><br><span class="line">    circle.string()</span><br><span class="line">    <span class="comment"># 实例化Rectangle对象，顶点位置（15,15），长和宽</span></span><br><span class="line">    r1 = Rectangle(<span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>)</span><br><span class="line">    r1.string()</span><br><span class="line">    <span class="comment"># 实例化Rectangle对象，顶点位置（40,30），长和宽</span></span><br><span class="line">    r2 = Rectangle(<span class="number">40</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">14</span>)</span><br><span class="line">    r2.string()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">通过运用前面所学的知识 &lt;br&gt; 完成自己的任务</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://code.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习（十五）</title>
    <link href="https://code.maylove.pub/2021/067b3454cbf0/"/>
    <id>https://code.maylove.pub/2021/067b3454cbf0/</id>
    <published>2021-11-03T15:16:10.000Z</published>
    <updated>2021-11-03T15:21:40.687Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="代码练习"><a href="#代码练习" class="headerlink" title="代码练习"></a>代码练习</h3><blockquote><p>自定义两个类Person和Student，且Student继承自Person。Person类主要描述人的姓名和性别两大基本特征。Student类除了保持父类的基本属性之外还具有分数、主修两个公有属以及一个私有属性（学号）。请根据上述的基本说明，对stu和stu_2两个对象的信息进行综合展示。</p><p>效果图如下：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-3/1.jpg" alt="1"></p></blockquote><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><ol><li>自定义Person类，并重写其构造（初始化）方法__init__( )，将name和gender参数赋值给实例对象的属性</li><li>自定义实例方法speak( )，功能：打印“hello ! 我是xxx”。relation( )方法主要是占位作用，无其他实质性功能</li><li>自定义Student类，继承自Person类，并重写其构造（初始化）方法__init__( )，name、gender参数通过调用父类的构造函数进行赋值，score、major及__stu_num通过子类重写的 <strong>init</strong>( )进行赋值，设置__stu_num的初始值为’2018014002’。</li><li>自定义实例方法speak( )，功能：打印’我的学号为xxxxxxxxxx，很高兴认识大家’;</li><li>自定义实例方法identify_stu( )，功能：判断Student对象的学号。若学号为2018014002，则打印‘我的分组已经完成’，反之则打印‘请稍后，马上为你自动分组’；</li><li>自定义实例方法set_num( new_num)，功能：将学号重写设置为new_num；</li><li>自定义实例方法relation( )，功能：判断Student是否为Person的子类。若成立，则打印‘我的父类是Person’，反之则打印‘父类正在查询中······’</li><li>初始化实例对象stu和stu_2，并根据上述效果图调用对应方法</li></ol><h4 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h4><ol><li>Person类中的实例方法relation( )为占位功能时，其方法体可用pass语句代替</li><li>使用issubclass()是判断是否是子类，第一个参数传入的是子类类名，第二个参数传入的是父类类名。</li><li><code>略......</code></li></ol><h4 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="comment"># 重写实例对象的构造（初始化）方法</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法，格式化打印实例属性name的值</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法，占位作用</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Person</span>):</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 重写实例对象的构造（初始化）方法，并调用父类实例属性的赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义实例方法，格式化打印实例属性stu_num的</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法，判断学号是否为既定值，并根据进行分类打印</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法，设置实例对象的学号为传入的值</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法，判断该类是否为Person类的子类</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">stu = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">90</span>, <span class="string">&#x27;数学&#x27;</span>)</span><br><span class="line"><span class="comment"># 调用speak方法 打印stu对应的值</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 鉴别学号是否为指定值</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 鉴别实例对象所属的类的父类是否为</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******************&quot;</span>)</span><br><span class="line">stu_2 = Student(<span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>)</span><br><span class="line"><span class="comment"># 调用实例方法 设置stu_2的学号为&#x27;2018040625&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 打印stu_2对应的值</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 鉴别学号是否为指定值</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="代码提交区"><a href="#代码提交区" class="headerlink" title="代码提交区"></a>代码提交区</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 重写实例对象的构造（初始化）方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法，格式化打印实例属性name的值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello i am %s&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法，占位作用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sex</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="comment"># 重写实例对象的构造（初始化）方法，并调用父类实例属性的赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex, score, major</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, sex)</span><br><span class="line">        self.score = score</span><br><span class="line">        self.major = major</span><br><span class="line">        self._stu_num = <span class="number">20211103</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法，格式化打印实例属性stu_num的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我的学号是%s,很高兴见到大家&#x27;</span> % self._stu_num)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法，判断学号是否为既定值，并根据进行分类打印</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify_stu</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span>(self._stu_num == <span class="number">20211103</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;我的分组已完成&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;请稍后,马上为你自动分组&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法，设置实例对象的学号为传入的值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_num</span>(<span class="params">self, new_num</span>):</span></span><br><span class="line">        self._stu_num = new_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法，判断该类是否为Person类的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">relation</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">issubclass</span>(Student, Person):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;我的父类是Person&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;父类正在查询中.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    stu = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">90</span>, <span class="string">&#x27;数学&#x27;</span>)</span><br><span class="line">    <span class="comment"># 调用speak方法 打印stu对应的值</span></span><br><span class="line">    stu.speak()</span><br><span class="line">    <span class="comment"># 调用实例方法 鉴别学号是否为指定值</span></span><br><span class="line">    stu.identify_stu()</span><br><span class="line">    <span class="comment"># 调用实例方法 鉴别实例对象所属的类的父类是否为</span></span><br><span class="line">    stu.relation()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;******************&quot;</span>)</span><br><span class="line">    stu_2 = Student(<span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>)</span><br><span class="line">    <span class="comment"># 调用实例方法 设置stu_2的学号为&#x27;2018040625&#x27;</span></span><br><span class="line">    stu_2._stu_num = <span class="number">20211103</span></span><br><span class="line">    <span class="comment"># 调用实例方法 打印stu_2对应的值</span></span><br><span class="line">    stu_2.speak()</span><br><span class="line">    <span class="comment"># 调用实例方法 鉴别学号是否为指定值</span></span><br><span class="line">    stu_2.identify_stu()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">通过运用前面所学的知识 &lt;br&gt; 完成自己的任务</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://code.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python 类的高级函数(双下横线)</title>
    <link href="https://code.maylove.pub/2021/8ccd594d7e0f/"/>
    <id>https://code.maylove.pub/2021/8ccd594d7e0f/</id>
    <published>2021-11-03T15:15:37.000Z</published>
    <updated>2021-11-03T15:20:32.776Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类的高级函数-双下横线"><a href="#类的高级函数-双下横线" class="headerlink" title="类的高级函数(双下横线)"></a>类的高级函数(双下横线)</h3><h4 id="str"><a href="#str" class="headerlink" title="__str__"></a><code>__str__</code></h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li>如果定义了该函数, 当<code>print</code>当前实例化对象的时候, 会返回改函数的<code>return</code>信息</li></ul><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul><li>```python<br>def <strong>str</strong>(self):<pre><code>return str_type</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 参数</span><br><span class="line"></span><br><span class="line">- 无</span><br><span class="line"></span><br><span class="line">##### 返回值</span><br><span class="line"></span><br><span class="line">- 一般返回对于该类的描述信息</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line"></span><br><span class="line">#### `__gatattr__`</span><br><span class="line"></span><br><span class="line">##### 介绍</span><br><span class="line"></span><br><span class="line">- 当调用的属性或方法不存在时,会返回该方法定义的信息</span><br><span class="line"></span><br><span class="line">##### 用法</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">def __gatattr__(self, key):</span><br><span class="line">print(something...)</span><br></pre></td></tr></table></figure></li></ul><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><code>key</code> : 调用任意不存在的属性名</li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ul><li>可以是任意类型也可以不进行返回</li></ul><h3 id="代码片段1"><a href="#代码片段1" class="headerlink" title="代码片段1"></a>代码片段1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is a test class&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;这个key:&#123;&#125;并不存在&#x27;.format(key))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这个key:&#123;&#125;并不存在&#x27;</span>.<span class="built_in">format</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># print(t.a)</span></span><br><span class="line"><span class="built_in">print</span>(t.a)</span><br><span class="line"><span class="built_in">print</span>(t.b)</span><br></pre></td></tr></table></figure><h4 id="setattr"><a href="#setattr" class="headerlink" title="__setattr__"></a><code>__setattr__</code></h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>拦截当前类中不存在的属性与值</li></ul><h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__settattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">self.__dict__[key] = value</span><br></pre></td></tr></table></figure><h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><ul><li><code>key</code> 当前的属性名</li><li><code>value</code> 当前的参数对应的值</li></ul><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><ul><li>无</li></ul><h4 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h4><h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><ul><li>本质是将一个类变成一个函数</li></ul><h5 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;call will start&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h5><ul><li>可传任意参数</li></ul><h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><ul><li>与函数情况相同 可有可无</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is a test class&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;这个key:&#123;&#125;并不存在&#x27;.format(key))</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这个key:&#123;&#125;并不存在&#x27;</span>.<span class="built_in">format</span>(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="comment"># print(key, value)</span></span><br><span class="line">        <span class="comment"># if key not in self.__dict__:</span></span><br><span class="line">        self.__dict__[key] = value</span><br><span class="line">        <span class="built_in">print</span>(self.__dict__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call func will start&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># print(t.a)</span></span><br><span class="line"><span class="built_in">print</span>(t.a)</span><br><span class="line"><span class="built_in">print</span>(t.b)</span><br><span class="line">t.name = <span class="string">&#x27;小慕&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t.name)</span><br><span class="line">t(<span class="string">&#x27;dewei&#x27;</span>)</span><br><span class="line"><span class="comment"># t.a.b.c 链式操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, attr=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        self.__attr = attr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;key is &#123;&#125;&#x27;.format(self.__attr))</span></span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.__attr:</span><br><span class="line">            key = <span class="string">&#x27;&#123;&#125;.&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.__attr, key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            key = key</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br><span class="line">        <span class="keyword">return</span> Test2(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t2 = Test2()</span><br><span class="line">name = t2.a.b.c(<span class="string">&#x27;dewei&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = t2.name.age.sex(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中类的高级函数(双下横线)</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 类的多重继承</title>
    <link href="https://code.maylove.pub/2021/7af2758498e2/"/>
    <id>https://code.maylove.pub/2021/7af2758498e2/</id>
    <published>2021-11-03T15:15:26.000Z</published>
    <updated>2021-11-03T15:20:11.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类的多重继承"><a href="#类的多重继承" class="headerlink" title="类的多重继承"></a>类的多重继承</h3><h5 id="什么是多重继承"><a href="#什么是多重继承" class="headerlink" title="什么是多重继承"></a>什么是多重继承</h5><ul><li>可以继承多个基(父)类</li></ul><h5 id="多重继承的方法"><a href="#多重继承的方法" class="headerlink" title="多重继承的方法"></a>多重继承的方法</h5><ul><li><p><code>class Child(Parent1,  Parent2, Parent3...)</code></p></li><li><p>将被继承的类放入子类的参数位中,用逗号隔开</p></li><li><p>从左向右依次继承</p></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 2个父类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;tool work&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">car</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;car will run&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;food work&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;i like cake&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承父类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">Food, Tool</span>):</span>  <span class="comment"># 最左边的类先被继承,如果有多个类,则最开始的那个类发生作用</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Person()</span><br><span class="line">    p_car = p.car()</span><br><span class="line">    p_cake = p.cake()</span><br><span class="line">    <span class="built_in">print</span>(p_car)</span><br><span class="line">    <span class="built_in">print</span>(p_cake)</span><br><span class="line">    p_work = p.work()</span><br><span class="line">    <span class="built_in">print</span>(p_work)</span><br><span class="line">    <span class="built_in">print</span>(Person.__mro__)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;类的多重继承</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 类的多态</title>
    <link href="https://code.maylove.pub/2021/95f82be06496/"/>
    <id>https://code.maylove.pub/2021/95f82be06496/</id>
    <published>2021-11-01T15:35:26.000Z</published>
    <updated>2021-11-01T15:38:49.145Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h3><h4 id="什么是类的多态"><a href="#什么是类的多态" class="headerlink" title="什么是类的多态"></a>什么是类的多态</h4><ul><li>同一个功能的多状变化</li></ul><h4 id="多态的用法"><a href="#多态的用法" class="headerlink" title="多态的用法"></a>多态的用法</h4><ul><li><code>子类中重写父类的方法</code></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 书写一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomuFather</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小慕的爸爸说了一句话&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大家都可以跳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 书写一个子类,并且继承一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomuBrother</span>(<span class="params">XiaomuFather</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小慕哥哥在奔跑着&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小慕哥哥在说话&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为什么要去多态</span></span><br><span class="line"><span class="comment"># 为什么要去继承父类</span></span><br><span class="line"><span class="comment"># 答案: 为了已经写好的类中的函数</span></span><br><span class="line"><span class="comment"># 为了保留子类中某个和父类名称一样的函数的功能, 这时候, 我们就用到了类的多态</span></span><br><span class="line"><span class="comment"># 可以帮助我们保留子类中的函数功能</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xiaomu</span>(<span class="params">XiaomuFather</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;haha 小慕也可以说自己的观点&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xiaomu_brother = XiaomuBrother()</span><br><span class="line">    xiaomu_brother.run()</span><br><span class="line">    xiaomu_brother.talk()</span><br><span class="line">    xiaomu_brother.jump()</span><br><span class="line">    father = XiaomuFather()</span><br><span class="line">    father.talk()</span><br><span class="line">    xiaomu = Xiaomu()</span><br><span class="line">    xiaomu.talk()</span><br><span class="line">    xiaomu.jump()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中类的继承</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 类的super函数</title>
    <link href="https://code.maylove.pub/2021/c806169e5392/"/>
    <id>https://code.maylove.pub/2021/c806169e5392/</id>
    <published>2021-11-01T15:35:14.000Z</published>
    <updated>2021-11-01T15:36:17.849Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类的super函数"><a href="#类的super函数" class="headerlink" title="类的super函数"></a>类的super函数</h3><h4 id="super函数的作用"><a href="#super函数的作用" class="headerlink" title="super函数的作用"></a>super函数的作用</h4><ul><li><code>python</code>子类<code>继承父类</code>的<code>方法</code>而使用的<code>关键字</code>.<ul><li>当<strong>子类继承父类</strong>后 ,就可以<code>使用</code><strong>父类的方法</strong></li></ul></li></ul><h4 id="super函数的用法"><a href="#super函数的用法" class="headerlink" title="super函数的用法"></a>super函数的用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello i am parent&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello i am child&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>(Child, self).__init__()  <span class="comment">#python3 括弧内的参数可以省略</span></span><br><span class="line">        <span class="comment">#      当前类  类的实例</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, p</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello i am parent %s &#x27;</span> % p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, c, p</span>):</span></span><br><span class="line">        <span class="comment"># super(Child, self).__init__(p)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(p)</span><br><span class="line">        <span class="comment"># super(Child, self).__init__(&#x27;parent&#x27;) 也可以</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello i am child %s &#x27;</span> % c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = Child(c=<span class="string">&#x27;Child&#x27;</span>, p=<span class="string">&#x27;Parent&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中类的继承</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 类的继承</title>
    <link href="https://code.maylove.pub/2021/9c6f24dde47e/"/>
    <id>https://code.maylove.pub/2021/9c6f24dde47e/</id>
    <published>2021-10-30T15:57:43.000Z</published>
    <updated>2021-10-30T15:59:17.345Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><h4 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h4><ul><li>通过继承<code>基类</code>来得到<code>基类</code>的功能</li><li>所以我们把<code>被继承的类</code>称作<strong>父类或基类</strong>,<code>继承者</code>被称为子类</li></ul><h4 id="父-基-类与子类"><a href="#父-基-类与子类" class="headerlink" title="父(基)类与子类"></a>父(基)类与子类</h4><ul><li><strong>子类</strong>拥有<code>父类</code>所有的<code>属性和方法</code></li><li>父类<code>不具备</code>子类自有的<code>属性和方法</code></li></ul><h4 id="继承的用法"><a href="#继承的用法" class="headerlink" title="继承的用法"></a>继承的用法</h4><ul><li>定义子类时,将父类传入子类参数内</li><li>子类实例化可以调用自己与父类的函数与变量</li><li>父类无法调用子类的函数与变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> are walking&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_sex</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.sex == <span class="string">&#x27;boy&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> is a boy&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> is a girl&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildOne</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play_football</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> are playing football&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildTwo</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play_pingpong</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> are playing pingpong&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c_one = ChildOne(name=<span class="string">&#x27;小慕&#x27;</span>, sex=<span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line">result = c_one.play_football()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result = c_one.talk()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c_two = ChildTwo(name=<span class="string">&#x27;小云&#x27;</span>, sex=<span class="string">&#x27;girl&#x27;</span>)</span><br><span class="line">result = c_two.play_pingpong()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result = c_two.talk()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">p = Parent(name=<span class="string">&#x27;小慕爸爸&#x27;</span>, sex=<span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line">result = p.talk()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result = p.is_sex()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># result = p.play_pingpong()</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中类的继承</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 类的常用装饰器</title>
    <link href="https://code.maylove.pub/2021/8c9c5da11bdf/"/>
    <id>https://code.maylove.pub/2021/8c9c5da11bdf/</id>
    <published>2021-10-30T15:57:27.000Z</published>
    <updated>2021-10-30T15:58:50.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类的常用装饰器"><a href="#类的常用装饰器" class="headerlink" title="类的常用装饰器"></a>类的常用装饰器</h3><h4 id="classmethod"><a href="#classmethod" class="headerlink" title="classmethod"></a>classmethod</h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>将类函数可以不经过实例化而直接被调用</li></ul><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">cls, ...</span>):</span></span><br><span class="line">do</span><br></pre></td></tr></table></figure><h5 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>cls</code>替代普通类函数中的<code>self</code>,</li><li><code>变为cls</code>,代表当前操作的是类</li></ul><hr><h4 id="staticmethod"><a href="#staticmethod" class="headerlink" title="staticmethod"></a>staticmethod</h4><h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><ul><li>将类函数可以不经过实例化而直接被调用,<br>被改装饰器调用的函数不许传递self或cls函数,<br>且无法在该函数内调用其他类函数或类变量</li></ul><h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">...</span>):</span></span><br><span class="line">do</span><br></pre></td></tr></table></figure><h5 id="参数介绍-1"><a href="#参数介绍-1" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li>函数体内无cls或self参数</li></ul><hr><h4 id="property"><a href="#property" class="headerlink" title="property"></a>property</h4><h5 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">do</span><br></pre></td></tr></table></figure><h5 id="参数介绍-2"><a href="#参数介绍-2" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li>无重要参数说明</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run&#x27;</span>)</span><br><span class="line">        self.dump()</span><br><span class="line">        self.sleep()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">cls</span>):</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;dump&#x27;</span>)</span><br><span class="line">       <span class="comment"># cls.run()</span></span><br><span class="line">       <span class="comment"># 无法在一个classmethod函数中调用self函数</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>():</span></span><br><span class="line">        <span class="comment"># self.dump()</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i want sleep&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = Test(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">t.run()</span><br><span class="line"><span class="comment"># Test.dump()</span></span><br><span class="line"><span class="comment"># print(&#x27;------&#x27;)</span></span><br><span class="line"><span class="comment"># Test.sleep()</span></span><br><span class="line"><span class="comment"># t.sleep()</span></span><br><span class="line"><span class="comment"># t.dump()</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.__name = value</span><br><span class="line"></span><br><span class="line">t1 = Test1(name=<span class="string">&#x27;dewei&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.name)</span><br><span class="line"><span class="comment"># t1.name = &#x27;小慕&#x27;</span></span><br><span class="line"><span class="comment"># print(t1.name)</span></span><br><span class="line">t1.name = <span class="string">&#x27;小慕&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t1.name)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中类的常用装饰器</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 装饰器</title>
    <link href="https://code.maylove.pub/2021/8ac31b97c4f0/"/>
    <id>https://code.maylove.pub/2021/8ac31b97c4f0/</id>
    <published>2021-10-28T14:25:10.000Z</published>
    <updated>2021-10-28T14:38:58.680Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><h4 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h4><ul><li>也是一种函数</li><li>可以接受函数作为参数</li><li>可以返回函数</li><li>接收一个函数,内部对其处理,然后返回一个新函数,动态的增强函数功能</li><li>将<code>c函数</code>在<code>a函数</code>中执行,在<code>a函数</code>中可以<strong>选择执行</strong>或<strong>不执行</strong><code>c函数</code>,也可以对<code>c函数</code>的<strong>结果</strong>进行<strong>二次加工处理</strong></li></ul><h4 id="装饰器的定义"><a href="#装饰器的定义" class="headerlink" title="装饰器的定义"></a>装饰器的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span>(<span class="params">func_args</span>):</span> 外围函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inter</span>(<span class="params">*args, **kwargs</span>):</span> 内嵌函数</span><br><span class="line">reture func_args(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> inter   外围函数返回内嵌函数</span><br></pre></td></tr></table></figure><h4 id="装饰器的用法"><a href="#装饰器的用法" class="headerlink" title="装饰器的用法"></a>装饰器的用法</h4><ul><li><p>将<code>被调用的函数</code>直接作为<code>参数</code><strong>传入</strong><code>装饰器</code>的<code>外围函数括弧</code></p></li><li><p>将装饰器与被调用函数绑定在一起</p></li><li><p><code>@符号 + 装饰器函数</code>放在被调用函数的上一行 , <code>被调用的函数</code><strong>正常定义</strong> , <code>只需要直接调用</code><strong>被执行函数</strong>即可</p></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_str</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;func:&#x27;</span>, func)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;args:&#x27;</span>, args, kwargs)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">if</span> result == <span class="string">&#x27;ok&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;result is %s&#x27;</span> % result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;result is failed:%s&#x27;</span> % result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_str</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">result = test(data=<span class="string">&#x27;no&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">result = test(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的装饰器</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python中的封装</title>
    <link href="https://code.maylove.pub/2021/3ef525f29f3e/"/>
    <id>https://code.maylove.pub/2021/3ef525f29f3e/</id>
    <published>2021-10-28T14:24:58.000Z</published>
    <updated>2021-10-28T14:38:53.840Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的封装"><a href="#Python中的封装" class="headerlink" title="Python中的封装"></a>Python中的封装</h3><h4 id="python中的封装概念"><a href="#python中的封装概念" class="headerlink" title="python中的封装概念"></a>python中的封装概念</h4><ul><li><p>将<code>不对外</code>的<code>私有属性或方法</code>通过<strong>可对外使用的函数</strong>而使用</p><p>​        (类中<code>定义私有的</code>,只有通过类<code>内部使用</code>,<strong>外部无法访问</strong>)</p></li><li><p>这样做的<strong>主要原因</strong>:<code>保护隐私</code>, <code>明确区分内外</code></p></li></ul>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的封装</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(十四)</title>
    <link href="https://code.maylove.pub/2021/65df7f3fb793/"/>
    <id>https://code.maylove.pub/2021/65df7f3fb793/</id>
    <published>2021-10-28T14:24:36.000Z</published>
    <updated>2021-10-28T14:38:48.943Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h3><blockquote><p>自定义一个交通工具类(Vehicle)，并根据提示对该类进行进一步封装，使其拥有工具类型、速度、体积等属性值。通过自定义实例方法实现交通工具的前移、速度设置、获取当前速度、加速行驶、减速行驶、实例信息展示、实例类型判别等功能。</p><p>效果图如下：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-10-28/1.jpg" alt="1"></p></blockquote><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><ol><li><p>自定义一个交通工具类(Vehicle)</p></li><li><p>设置类属性trans_type（默认值为SUV）和实例属性速度speed（int 类型，单位为 km/h）、体积size（tuple类型，单位为米。）</p></li><li><p>自定义方法 show_info( )，打印实例的所属类型和速度、体积的值；</p></li><li><p>自定义实例方法如下：</p><ol><li>定义move( )方法，实现打印”我已向前移动了50米”</li><li>定义set_speed(new_speed)方法，设置对应实例的速度为new_speed km/h</li><li>定义get_speed()方法，如果（2）中设置了速度值则打印出来，打印格式为”我的时速为：设置的速度值 km/h”</li><li>定义speed_up()方法，设置每次调用时实例的速度都增加10km/h，并打印”我的速度由xx km/提升到了xx km/h”</li><li>定义speed_down()方法，设置每次调用时实例的速度都降低15km/h，并打印”我的速度由xx km/下降到了xx km/h”</li></ol></li><li><p>自定义方法 transport_identify( )，判断实例的trans_type属性是否为SUV。若是则打印”类型匹配”，反之则打印”类型不匹配”</p></li><li><p>初始化实例对象tool_1，并根据上述效果图调用对应方法</p></li></ol><h4 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h4><ul><li>类的初始化方法中所传参数size是元组类型，直接传入实例的长，宽，高即可，如size=(10,10,10)</li></ul><h4 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="comment"># 自定义Vehicle类属性</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例的初始化方法</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法show_info，打印实例的速度和体积</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法move,打印“我已向前移动了50米”</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法set_speed，设置对应的速度值</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法get_speed，打印当前的速度值</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法speed_up，实现对实例的加速</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法speed_down，实现对实例的减速</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义实例方法transport_identify，实现对实例</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">tool_1 = Vehicle(<span class="number">20</span>, (<span class="number">3.6</span>, <span class="number">1.9</span>, <span class="number">1.75</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 打印实例的速度和体积</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 实现实例的前移</span></span><br><span class="line">    </span><br><span class="line">tool_1.set_speed(<span class="number">40</span>)</span><br><span class="line"><span class="comment"># 调用实例方法 打印当前速度</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 对实例进行加速</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 对实例进行减速</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用实例方法 判断当前实例的类型</span></span><br></pre></td></tr></table></figure><h4 id="代码提交区"><a href="#代码提交区" class="headerlink" title="代码提交区"></a>代码提交区</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 自定义Vehicle类属性</span></span><br><span class="line">    trans_type = <span class="string">&#x27;SUV&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例的初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, speed, size</span>):</span></span><br><span class="line">        self.speed = speed</span><br><span class="line">        self.size = size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法show_info，打印实例的速度和体积</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;所属类型:&#123;&#125;,速度是&#123;&#125;km/h,体积是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.trans_type, self.speed, self.size))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法move,打印“我已向前移动了50米”</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我已向前移动了50米&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法set_speed，设置对应的速度值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_speed</span>(<span class="params">self, speed</span>):</span></span><br><span class="line">        self.speed = speed</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法get_speed，打印当前的速度值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_speed</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我的时速为:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.speed))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法speed_up，实现对实例的加速</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed_up</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__new_speed = self.speed + <span class="number">10</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我的速度由&#123;&#125;km/h,提升到了&#123;&#125;km/h&#x27;</span>.<span class="built_in">format</span>(self.speed,self.__new_speed))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法speed_down，实现对实例的减速</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed_down</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__speed = self.speed - <span class="number">15</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我的速度由&#123;&#125;km/h,下降到了&#123;&#125;km/h&#x27;</span>.<span class="built_in">format</span>(self.speed, self.__speed))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义实例方法transport_identify，实现对实例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transport_identify</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(self, Vehicle):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;类型匹配&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;类型不匹配&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tool_1 = Vehicle(<span class="number">20</span>, (<span class="number">3.6</span>, <span class="number">1.9</span>, <span class="number">1.75</span>))</span><br><span class="line"><span class="comment"># 调用实例方法 打印实例的速度和体积</span></span><br><span class="line">    tool_1.show_info()</span><br><span class="line"><span class="comment"># 调用实例方法 实现实例的前移</span></span><br><span class="line">    tool_1.move()</span><br><span class="line">    tool_1.set_speed(<span class="number">40</span>)</span><br><span class="line"><span class="comment"># 调用实例方法 打印当前速度</span></span><br><span class="line">    tool_1.get_speed()</span><br><span class="line"><span class="comment"># 调用实例方法 对实例进行加速</span></span><br><span class="line">    tool_1.speed_up()</span><br><span class="line"><span class="comment"># 调用实例方法 对实例进行减速</span></span><br><span class="line">    tool_1.speed_down()</span><br><span class="line"><span class="comment"># 调用实例方法 判断当前实例的类型</span></span><br><span class="line">    tool_1.transport_identify()</span><br></pre></td></tr></table></figure><h4 id="结果检验"><a href="#结果检验" class="headerlink" title="结果检验"></a>结果检验</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Python39</span>\<span class="title">python.exe</span> <span class="title">C</span>:/<span class="title">Users</span>/<span class="title">admin</span>/<span class="title">PycharmProjects</span>/<span class="title">python_object</span>/<span class="title">hello.py</span></span></span><br><span class="line"><span class="function">所属类型:<span class="title">SUV</span>,速度是20<span class="title">km</span>/<span class="title">h</span>,体积是(3.6, 1.9, 1.75)</span></span><br><span class="line"><span class="function">我已向前移动了50米</span></span><br><span class="line"><span class="function">我的时速为:40</span></span><br><span class="line"><span class="function">我的速度由40<span class="title">km</span>/<span class="title">h</span>,提升到了50<span class="title">km</span>/<span class="title">h</span></span></span><br><span class="line"><span class="function">我的速度由40<span class="title">km</span>/<span class="title">h</span>,下降到了25<span class="title">km</span>/<span class="title">h</span></span></span><br><span class="line"><span class="function">类型匹配</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">进程已结束，退出代码为 0</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h5 id="学霸答案区"><a href="#学霸答案区" class="headerlink" title="学霸答案区"></a>学霸答案区</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 自定义Vehicle类属性</span></span><br><span class="line">    trans_type = <span class="string">&#x27;SUV&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 自定义实例的初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,speed,size</span>):</span></span><br><span class="line">        self.speed = speed</span><br><span class="line">        self.size = size</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自定义实例方法show_info，打印实例的速度和体积</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;速度：&#123;0&#125;km/h,体积：&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(self.speed,self.size))</span><br><span class="line">    <span class="comment"># 自定义实例方法move,打印“我已向前移动了50米”</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我已经向前移动了50米&#x27;</span>)</span><br><span class="line">    <span class="comment"># 自定义实例方法set_speed，设置对应的速度值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_speed</span>(<span class="params">self,speed</span>):</span></span><br><span class="line">        self.speed = speed</span><br><span class="line">    <span class="comment"># 自定义实例方法get_speed，打印当前的速度值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_speed</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我的时速为：&#123;0&#125;km/h&#x27;</span>.<span class="built_in">format</span>(self.speed))</span><br><span class="line">    <span class="comment"># 自定义实例方法speed_up，实现对实例的加速</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed_up</span>(<span class="params">self</span>):</span></span><br><span class="line">        speed2 = self.speed+<span class="number">10</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我的速度由&#123;0&#125;km/h提升到了&#123;1&#125;km/h&#x27;</span>.<span class="built_in">format</span>(self.speed,speed2))</span><br><span class="line">        self.speed = speed2</span><br><span class="line">    <span class="comment"># 自定义实例方法speed_down，实现对实例的减速</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed_down</span>(<span class="params">self</span>):</span></span><br><span class="line">        speed3 = self.speed - <span class="number">15</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我的速度由&#123;0&#125;km/h下降到了&#123;1&#125;km/h&#x27;</span>.<span class="built_in">format</span>(self.speed,speed3))</span><br><span class="line">        self.speed = speed3</span><br><span class="line">    <span class="comment"># 自定义实例方法transport_identify，实现对实例所属类型的判断</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transport_identify</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(self,Vehicle):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;类型匹配&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;类型不匹配&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tool_1 = Vehicle(<span class="number">20</span>, (<span class="number">3.6</span>, <span class="number">1.9</span>, <span class="number">1.75</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 调用实例方法 打印实例的速度和体积</span></span><br><span class="line">    tool_1.show_info()</span><br><span class="line">    <span class="comment"># 调用实例方法 实现实例的前移</span></span><br><span class="line">    tool_1.move()</span><br><span class="line"> </span><br><span class="line">    tool_1.set_speed(<span class="number">40</span>)</span><br><span class="line">    <span class="comment"># 调用实例方法 打印当前速度</span></span><br><span class="line">    tool_1.get_speed()</span><br><span class="line">    <span class="comment"># 调用实例方法 对实例进行加速</span></span><br><span class="line">    tool_1.speed_up()</span><br><span class="line">    <span class="comment"># 调用实例方法 对实例进行减速</span></span><br><span class="line">    tool_1.speed_down()</span><br><span class="line">    <span class="comment"># 调用实例方法 判断当前实例的类型</span></span><br><span class="line">    tool_1.transport_identify()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">通过运用前面所学的知识 &lt;br&gt; 完成自己的任务</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://code.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python 私有函数和私有变量</title>
    <link href="https://code.maylove.pub/2021/a85b5a2e7b47/"/>
    <id>https://code.maylove.pub/2021/a85b5a2e7b47/</id>
    <published>2021-10-28T14:23:54.000Z</published>
    <updated>2021-10-28T14:48:40.244Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="私有函数和私有变量"><a href="#私有函数和私有变量" class="headerlink" title="私有函数和私有变量"></a>私有函数和私有变量</h3><h4 id="什么是私有函数和私有变量"><a href="#什么是私有函数和私有变量" class="headerlink" title="什么是私有函数和私有变量"></a>什么是私有函数和私有变量</h4><ul><li>无法被实例化后的对象调用的类中的函数与变量</li><li>类的内部可以调用私有函数与变量</li><li>只希望类内部业务调用使用,不希望被使用者使用</li></ul><h4 id="私有函数与私有变量的定义方法"><a href="#私有函数与私有变量的定义方法" class="headerlink" title="私有函数与私有变量的定义方法"></a>私有函数与私有变量的定义方法</h4><ul><li>在一个变量或函数前添加<code>__</code>(2个下横线),变量或函数名后边无需添加</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">self.name = name</span><br><span class="line">self.__age = <span class="number">33</span>  <span class="comment"># 私有</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">self</span>):</span></span><br><span class="line">   <span class="built_in">print</span>(self.name, self.__age)  <span class="comment"># 私有</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cry</span>(<span class="params">self</span>):</span>  <span class="comment"># 私有</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I want cry&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __cat_type = <span class="string">&#x27;cat&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = self.__run()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.__cat_type&#125;</span>,小猫<span class="subst">&#123;self.name&#125;</span><span class="subst">&#123;self.__sex&#125;</span>开心的奔跑着&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = self.__dump()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dump</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.__cat_type&#125;</span>小猫<span class="subst">&#123;self.name&#125;</span><span class="subst">&#123;self.__sex&#125;</span>开心的跳着&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cat = Cat(name=<span class="string">&#x27;米粒儿&#x27;</span>, sex=<span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line">cat.run()</span><br><span class="line">cat.dump()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(cat))</span><br><span class="line"><span class="comment"># print(cat._Cat__dump())</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;私有函数和私有变量的基础知识</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 对象的生命周期</title>
    <link href="https://code.maylove.pub/2021/3f708f9e3b70/"/>
    <id>https://code.maylove.pub/2021/3f708f9e3b70/</id>
    <published>2021-10-28T14:23:43.000Z</published>
    <updated>2021-10-28T14:38:38.118Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h3><ul><li>对象的生命周期</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>内存中分配一个内存块</td><td>实例化<code>__init__:</code>对象生命的开始</td></tr><tr><td></td><td></td></tr><tr><td>从内存中释放这个内存块</td><td><code>__del__</code>: 删除对象</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;对象的生命周期的基础知识</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 类的构造函数</title>
    <link href="https://code.maylove.pub/2021/e1f702148634/"/>
    <id>https://code.maylove.pub/2021/e1f702148634/</id>
    <published>2021-10-28T14:23:31.000Z</published>
    <updated>2021-10-28T14:38:31.764Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h3><ul><li>类中的一种默认函数,用来将类实例化的同时, 将参数传入类中</li></ul><h4 id="构造函数的创建"><a href="#构造函数的创建" class="headerlink" title="构造函数的创建"></a>构造函数的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b</span>)</span></span><br><span class="line"><span class="function"><span class="title">self</span>.<span class="title">a</span> = <span class="title">a</span></span></span><br><span class="line"><span class="function">    <span class="title">self</span>.<span class="title">b</span> = <span class="title">b</span></span></span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">name</span>):</span></span><br><span class="line">   <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>在奔跑&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>在跳跃&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.run()</span><br><span class="line">        self.jump()</span><br><span class="line">        <span class="comment"># def sleep(name):</span></span><br><span class="line">        <span class="comment">#     return name</span></span><br><span class="line">        <span class="comment"># result = sleep(self.name)</span></span><br><span class="line">        <span class="comment"># print(&#x27;sleep result is&#x27;, result)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaomu = Person(name=<span class="string">&#x27;小慕&#x27;</span>,age=<span class="number">10</span>)</span><br><span class="line">xiaomu.name = <span class="string">&#x27;xiaomu&#x27;</span></span><br><span class="line">xiaomu.jump()</span><br><span class="line"></span><br><span class="line">dewei = Person(name=<span class="string">&#x27;dewei&#x27;</span>)</span><br><span class="line">dewei.jump()</span><br><span class="line"></span><br><span class="line">dewei.top = <span class="number">174</span></span><br><span class="line"><span class="built_in">print</span>(dewei.top)</span><br><span class="line"><span class="comment"># print(xiaomu.top)</span></span><br><span class="line"><span class="built_in">print</span>(dewei.age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------&#x27;</span>)</span><br><span class="line">xiaomu.work()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;类的构造函数</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 类的参数self</title>
    <link href="https://code.maylove.pub/2021/1e1c97e328e3/"/>
    <id>https://code.maylove.pub/2021/1e1c97e328e3/</id>
    <published>2021-10-28T14:23:18.000Z</published>
    <updated>2021-10-28T14:38:25.327Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类的参数self"><a href="#类的参数self" class="headerlink" title="类的参数self"></a>类的参数self</h3><ul><li><code>self</code>是类函数中的必传参数, 且必须放在第一个参数位置</li><li><code>self</code>是一个变量,他代表实例化的变量本身</li><li><code>self</code>可以直接通过定义点来定义一个类变量    <code>self.name = &#39;dewei&#39;</code></li><li>self中的变量与含有self参数的函数可以在类中的任何一个函数内随意调用</li><li>非函数中定义的变量在定义的时候不用self</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">name</span>):</span></span><br><span class="line">   <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    age = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>在奔跑&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>在跳跃&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.run()</span><br><span class="line">        self.jump()</span><br><span class="line">        <span class="comment"># def sleep(name):</span></span><br><span class="line">        <span class="comment">#     return name</span></span><br><span class="line">        result = sleep(self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;sleep result is&#x27;</span>, result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaomu = Person()</span><br><span class="line">xiaomu.name = <span class="string">&#x27;小慕&#x27;</span></span><br><span class="line">xiaomu.jump()</span><br><span class="line"></span><br><span class="line">dewei = Person()</span><br><span class="line">dewei.jump()</span><br><span class="line"></span><br><span class="line">dewei.top = <span class="number">174</span></span><br><span class="line"><span class="built_in">print</span>(dewei.top)</span><br><span class="line"><span class="comment"># print(xiaomu.top)</span></span><br><span class="line"><span class="built_in">print</span>(dewei.age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------&#x27;</span>)</span><br><span class="line">xiaomu.work()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;类的参数self</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 面向对象中常用术语</title>
    <link href="https://code.maylove.pub/2021/9b363a26ba6e/"/>
    <id>https://code.maylove.pub/2021/9b363a26ba6e/</id>
    <published>2021-10-28T14:23:05.000Z</published>
    <updated>2021-10-28T14:35:36.107Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="面向对象中常用术语"><a href="#面向对象中常用术语" class="headerlink" title="面向对象中常用术语"></a>面向对象中常用术语</h3><blockquote><p>为大家总结了面向对象中常用术语，请大家认真学习：</p></blockquote><p><strong>1、类：</strong> 可以理解是一个模板，通过它可以创建出无数个具体实例。</p><p>比如，定义一个Cat类，通过它可以创建出无数个实例来代表各种不同特征的猫。</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-10-24/1.jpg" alt="1"></p><p><strong>2、对象：</strong> 类并不能直接使用，通过类创建出的实例（又称对象）才能使用，比如以上案例创建类<br>对象cat。<br><strong>3、属性：</strong> 类中的所有变量称为属性。比如以上案例中类的变量有 颜色color 、体重 weight 、种类k<br>ind 、年龄age。<br><strong>4、方法：</strong> 类中的所有函数通常称为方法。不过，和函数所有不同的是，类方法至少要包含一个 sel<br>f 参数，类方法无法单独使用，只能和类的对象一起使用，比如以上案例中的方法有eat()、action<br>()、sleep()，创建对象后就可以直接调用类中的方法和属性。<br>面向对象最重要的概念就是类和实例，要牢记类是抽象的模板，而实例是根据类创建出来的一个个<br>具体的“对象”，每个对象都拥有相同的方法。</p>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;面向对象编程中的常用术语</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 初识面向对象编程</title>
    <link href="https://code.maylove.pub/2021/4b3e522b6936/"/>
    <id>https://code.maylove.pub/2021/4b3e522b6936/</id>
    <published>2021-10-22T16:50:05.000Z</published>
    <updated>2021-10-22T16:52:32.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="初识面向对象编程"><a href="#初识面向对象编程" class="headerlink" title="初识面向对象编程"></a>初识面向对象编程</h3><h4 id="什么是面向对象编程"><a href="#什么是面向对象编程" class="headerlink" title="什么是面向对象编程"></a>什么是面向对象编程</h4><ul><li>利用(面向)对象(属性或方法)去进行编码的过程</li><li>自定义对象数据类型就是面向对象中的类(class)的概念</li></ul><h4 id="类的关键字class"><a href="#类的关键字class" class="headerlink" title="类的关键字class"></a>类的关键字class</h4><ul><li><code>class</code>来<strong>声明类</strong>,<code>类的名称</code><strong>首字母大写</strong>,多单词情况下每个单词<strong>首字母大写</strong></li></ul><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">attr = something</span><br><span class="line"><span class="comment"># s</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">    do</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;面向对象编程的基础知识</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="对象和异常" scheme="https://code.maylove.pub/tags/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python [案例]实现学生信息库</title>
    <link href="https://code.maylove.pub/2021/aff30b79847e/"/>
    <id>https://code.maylove.pub/2021/aff30b79847e/</id>
    <published>2021-10-20T15:15:16.000Z</published>
    <updated>2021-10-20T15:24:19.355Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="案例-实现学生信息库"><a href="#案例-实现学生信息库" class="headerlink" title="[案例]实现学生信息库"></a>[案例]实现学生信息库</h3><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-10-20/3.png" alt="3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    学生信息库</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dewei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小慕&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小曼&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">4</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小高&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">5</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小云&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_user_info</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;没有发现学生姓名&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;没有发现学生姓名&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;没有发现学生姓名&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;class_number&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;没有发现学生姓名&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_students</span>():</span></span><br><span class="line">    <span class="keyword">for</span> id_, value <span class="keyword">in</span> students.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学号: &#123;&#125;,姓名&#123;&#125;,年龄&#123;&#125;,性别&#123;&#125;,班级&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            id_, value[<span class="string">&#x27;name&#x27;</span>], value[<span class="string">&#x27;age&#x27;</span>], value[<span class="string">&#x27;sex&#x27;</span>], value[<span class="string">&#x27;class_number&#x27;</span>]</span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">return</span> students</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># result = get_all_students()</span></span><br><span class="line"><span class="comment"># print(&#x27;----&#x27;, result)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_student</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    check = check_user_info(**kwargs)</span><br><span class="line">    <span class="keyword">if</span> check != <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(check)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    id_ = <span class="built_in">max</span>(students) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    students[id_] = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: kwargs[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: kwargs[<span class="string">&#x27;age&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: kwargs[<span class="string">&#x27;sex&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: kwargs[<span class="string">&#x27;class_number&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add_student(name=&#x27;小白&#x27;, age=19, class_number=&#x27;A&#x27;, sex=&#x27;boy&#x27;)</span></span><br><span class="line"><span class="comment"># get_all_students()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_student</span>(<span class="params">student_id</span>):</span></span><br><span class="line">    <span class="keyword">if</span> student_id <span class="keyword">not</span> <span class="keyword">in</span> students:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;并不存在&#x27;</span>.<span class="built_in">format</span>(student_id))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user_info = students.pop(student_id)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学号是&#123;&#125;, &#123;&#125;同学的信息已经被删除了&#x27;</span>.<span class="built_in">format</span>(student_id, user_info[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete_student(1)</span></span><br><span class="line"><span class="comment"># add_student(name=&#x27;小白&#x27;, age=19, class_number=&#x27;A&#x27;, sex=&#x27;boy&#x27;)</span></span><br><span class="line"><span class="comment"># get_all_students()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_student</span>(<span class="params">student_id, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> student_id <span class="keyword">not</span> <span class="keyword">in</span> students:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;并不存在这个学号:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(student_id))</span><br><span class="line"></span><br><span class="line">    check = check_user_info(**kwargs)</span><br><span class="line">    <span class="keyword">if</span> check != <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(check)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    students[student_id] = kwargs</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;同学信息更新完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update_student(<span class="number">1</span>, name=<span class="string">&#x27;dewei.zhang&#x27;</span>, age=<span class="number">33</span>, class_number=<span class="string">&#x27;A&#x27;</span>, sex=<span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line">get_all_students()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_by_id</span>(<span class="params">student_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> students.get(student_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_user_by_id(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_users</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    values = <span class="built_in">list</span>(students.values())</span><br><span class="line">    key = <span class="literal">None</span></span><br><span class="line">    value = <span class="literal">None</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        key = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">        value = kwargs[key]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        key = <span class="string">&#x27;sex&#x27;</span></span><br><span class="line">        value = kwargs[<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;class_number&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        key = <span class="string">&#x27;class_number&#x27;</span></span><br><span class="line">        value = kwargs[key]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">        key = <span class="string">&#x27;age&#x27;</span></span><br><span class="line">        value = kwargs[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有发现搜索的关键字&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> values:</span><br><span class="line">        <span class="keyword">if</span> user[key] == value:</span><br><span class="line">            result.append(user)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># users = search_users(age=18)</span></span><br><span class="line">users = search_users(sex=<span class="string">&#x27;girl&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(users)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">通过运用前面所学的知识 &lt;br&gt; 完成学生信息库的案例</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://code.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python 匿名函数lambda</title>
    <link href="https://code.maylove.pub/2021/091d96ffc9f9/"/>
    <id>https://code.maylove.pub/2021/091d96ffc9f9/</id>
    <published>2021-10-20T15:15:00.000Z</published>
    <updated>2021-10-20T15:23:10.593Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="匿名函数lambda"><a href="#匿名函数lambda" class="headerlink" title="匿名函数lambda"></a>匿名函数lambda</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>定义一个轻量化的函数</li><li><code>即用即删除</code>, 很适合需要完成一项功能 , 但是此功能<code>只在此一处使用</code></li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无参数</span></span><br><span class="line">f = <span class="keyword">lambda</span> :value</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line"><span class="comment"># 有参数</span></span><br><span class="line">f = <span class="keyword">lambda</span> x,y: x*y</span><br><span class="line">f(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># result = f()</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># f1 = lambda x, y=2: x + y</span></span><br><span class="line">f1 = <span class="keyword">lambda</span> x, y=<span class="number">2</span>: x &gt; y</span><br><span class="line"><span class="comment"># print(f1(1, 2))</span></span><br><span class="line"><span class="built_in">print</span>(f1(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">users = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dewei&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaomu&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;asan&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">users.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(users)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;匿名函数lambda</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="函数" scheme="https://code.maylove.pub/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
