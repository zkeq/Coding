<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZkeqのCoding日志</title>
  
  <subtitle>Python Java Html 都在学</subtitle>
  <link href="https://coding.maylove.pub/atom.xml" rel="self"/>
  
  <link href="https://coding.maylove.pub/"/>
  <updated>2021-12-13T15:24:20.662Z</updated>
  <id>https://coding.maylove.pub/</id>
  
  <author>
    <name>Zkeq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Hexo 搭建博客 保姆式教程</title>
    <link href="https://coding.maylove.pub/2021/34fa11223ca1/"/>
    <id>https://coding.maylove.pub/2021/34fa11223ca1/</id>
    <published>2021-12-13T14:32:07.000Z</published>
    <updated>2021-12-13T15:24:20.662Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录Hexo博客搭建全流程.保姆式教学(仅凭记忆,无图请自行脑补)</p><p>我认为hexo搭建的话,就是没有任何编程基础的人就可以入手.</p><p>可以说,本篇教程用到的一切工具,都是大佬们已经封装好的,我们大部分时间都可以直接拿过来用…</p><p>不要对命令行窗口产生一种厌烦的情绪,其实图形化界面的背后也是集合了一个一个命令行</p><p>而且图形界面只能实现很小的一部分内容…</p></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>大多数同学的电脑应该都是Windows的电脑,能用上linux的话相信也不用看这篇教程.</p><p>那么本文就按我自己的电脑搭建环境来进行讲解</p><ul><li>自己已经搭建了差不多十个hexo博客了,从翻阅各种文档到博客成型,可以说浪费了很多时间.</li><li>期间遇到大佬们的博客给了我很大的帮助,当然也遇到了一些比较小众的问题,也通过搜索各种笔记解决了.</li><li>可以说我认为搭建一个博客很适合新手入门<ul><li>其一是有利于培养对于编程的兴趣和感觉</li><li>再来就是方便自己初学的时候记录各种笔记,方便日后翻阅.</li></ul></li></ul><h2 id="No-01-写作环境-本地环境"><a href="#No-01-写作环境-本地环境" class="headerlink" title="No.01 写作环境(本地环境)"></a>No.01 写作环境(本地环境)</h2><h3 id="小节1-环境搭建"><a href="#小节1-环境搭建" class="headerlink" title="小节1:环境搭建"></a>小节1:环境搭建</h3><p><strong>这里引用Hexo官网的一段话</strong></p><blockquote><p><strong>安装前提</strong></p><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p></blockquote><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><ol><li><p>进入官网: <a href="https://nodejs.org/en/download/">Download | Node.js (nodejs.org)</a></p></li><li><p>点击下图所示位置</p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-12-13/1.png" alt="1" style="zoom:50%;"></li><li><p>点击下载好的文件进行安装 <code>node.js</code></p></li><li><p><strong>注意:</strong> <code>使用 Node.js 官方安装程序时，请确保勾选 **Add to PATH** 选项（默认已勾选）</code></p></li></ol><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><ol><li><p>进入Git淘宝镜像:<a href="https://npm.taobao.org/mirrors/git-for-windows/">git-for-windows Mirror (taobao.org)</a></p></li><li><p>滑到底部点击最后一个(可能因为时间原因,看到本文时已经出现新版本,请选择最新版本)</p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-12-13/2.png" alt="2" style="zoom:80%;" ></li><li><p>打开下载好的文件进行<code>安装</code></p></li><li><p>直接点击下一步安装就可以.</p></li></ol><h3 id="小节2-初始化站点"><a href="#小节2-初始化站点" class="headerlink" title="小节2: 初始化站点"></a>小节2: 初始化站点</h3><blockquote><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></blockquote><p><strong>以上是官方给的文档,第一次接触者方面的时候,我感到很疑惑,那个美元的符号是什么?.</strong></p><p>其实那个是Liunx系统的提示符,我们刚刚安装的Git其实就相当于一个小型的linux系统,甚至可以执行一些简单的指令,例如<code>ls</code> <code>dir</code> <code>vim</code>之类的</p><p><strong>其实这句话翻译一下就是</strong></p><blockquote><ol><li>在你的电脑上面打开PowerShell<ul><li>或者在任意一个文件夹点击右键,选择Git Bash Here.</li></ul></li><li>然后把那行命令复制到窗口中,等待一会就可以安装成功了.</li><li>一般来说这里应该不会报错…</li></ol></blockquote><p><strong>到这里,Hexo就已经完全安装成功了!我们来测试一下hexo.</strong></p><ol><li><p>不出意外的话,你现在的电脑在任意一个文件夹,选择右键,可以看到一个Git Bash Here.</p></li><li><p>点击它!</p></li><li><p>然后在弹出来的框框里面输入 <code>hexo -version</code> ,即为安装成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 这里我因为已经装了很多东西.大家只要看见hexo-cli,就表示已经安装成功了!</span><br><span class="line">$ hexo -version</span><br><span class="line">hexo-cli: <span class="number">4</span>.<span class="number">3</span>.<span class="number">0</span></span><br><span class="line"><span class="function">os: <span class="title">win32</span> 10.0.22000</span></span><br><span class="line"><span class="function"><span class="title">node</span>: 14.17.3</span></span><br><span class="line"><span class="function"><span class="title">v8</span>: 8.4.371.23-<span class="title">node</span>.67</span></span><br><span class="line"><span class="function"><span class="title">uv</span>: 1.41.0</span></span><br><span class="line"><span class="function"><span class="title">zlib</span>: 1.2.11</span></span><br><span class="line"><span class="function"><span class="title">brotli</span>: 1.0.9</span></span><br><span class="line"><span class="function"><span class="title">ares</span>: 1.17.1</span></span><br><span class="line"><span class="function"><span class="title">modules</span>: 83</span></span><br><span class="line"><span class="function"><span class="title">nghttp2</span>: 1.42.0</span></span><br><span class="line"><span class="function"><span class="title">napi</span>: 8</span></span><br><span class="line"><span class="function"><span class="title">llhttp</span>: 2.1.3</span></span><br><span class="line"><span class="function"><span class="title">openssl</span>: 1.1.1<span class="title">k</span></span></span><br><span class="line"><span class="function"><span class="title">cldr</span>: 39.0</span></span><br><span class="line"><span class="function"><span class="title">icu</span>: 69.1</span></span><br><span class="line"><span class="function"><span class="title">tz</span>: 2021<span class="title">a</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="小节3-建站"><a href="#小节3-建站" class="headerlink" title="小节3: 建站"></a>小节3: 建站</h3><blockquote><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &amp;lt;folder&amp;gt;</span><br><span class="line">$ <span class="built_in">cd</span> &amp;lt;folder&amp;gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></blockquote><p>我们来做一下阅读理解</p><ol><li><p>首先新建一个空文件夹</p></li><li><p>在空白处点击右键,选择<code>Git Bash Here</code> </p></li><li><p>依次输入以下命令</p><ol><li><p><code>hexo init .</code>     # 此条命令即为初始化Hexo,此条命令执行后,可以看到很多文件夹.说明安装成功 </p><p><em>注释: ‘.’表示在根目录下安装<code>hexo</code>,因为我们已经创建好了一个文件夹,所以在此根目录安装即可,即为 ‘.’</em></p></li><li><p><code>npm install</code>     # 此条命令即为安装上一步缺少的库,大家在上一个命令执行之后 直接执行即可</p></li></ol></li></ol><blockquote><p><strong>source</strong></p><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><p><strong>themes</strong></p><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><p><strong>_config.yml</strong></p><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong></p><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p></blockquote><p><strong>其中比较重要的是 <code>_config.yml</code>,</strong> </p><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><ul><li>需要注意的是,这里的_config.yml是<code>Hexo站点配置文件</code>,之后会创建一个 <code>主题配置文件</code>, <strong>注意区分</strong></li></ul><p><strong>接下来 修改网站的配置文件(当然,你也可以先去执行一下小节4里面的内容,看看网站最初的样子)</strong></p><blockquote><p><strong>配置</strong></p><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p><p><strong>网站</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>keywords</code></td><td align="left">网站的关键词。支持多个关键词。</td></tr><tr><td align="left"><code>author</code></td><td align="left">您的名字,即昵称</td></tr><tr><td align="left"><code>language</code></td><td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。(根据自己的主题选择)</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p></blockquote><blockquote><p><strong>网址</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>url</code></td><td align="left">网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td><td align="left"></td></tr><tr><td align="left"><code>root</code></td><td align="left">网站根目录</td><td align="left"><code>url&#39;s pathname</code></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td align="left"><code>:year/:month/:day/:title/</code></td></tr><tr><td align="left"><code>permalink_defaults</code></td><td align="left">永久链接中各部分的默认值</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls</code></td><td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls.trailing_index</code></td><td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>pretty_urls.trailing_html</code></td><td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td align="left"><code>true</code></td></tr></tbody></table><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html</span><br><span class="line">pretty_urls:</span><br><span class="line">trailing_index: false</span><br><span class="line"># 此时页面的永久链接会变为 http://example.com/foo/bar/</span><br></pre></td></tr></table></figure></blockquote><p><strong>需要注意的是,为了之后的维护方便,这里建议设置网站的永久链接为子目录+文件名的格式</strong></p><p><code>但是默认的格式是 :year/:month/:day/:title/</code>,这样的链接未免太长,对于之后的SEO优化不友好以及生成的链接样式非常不美观</p><p><strong>而且推荐建站的时候就把这个链接究竟是什么想好,避免日后修改时网站的访问统计和评论系统数据丢失以及迁移问题!!!</strong></p><p>本站采用用的是<code>年份</code>＋<code>.md文件哈希值</code>的方式</p><p>写法:  <code>:year/:hash/</code></p><p>其他样式参见: <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接（Permalinks） | Hexo</a>  由于内容较多,本文不再张贴.学会用法自行翻阅即可</p><blockquote><p>采用Gitee页面托管的网站,创建的仓库与本人用户名不同的话</p><p>本文件的url那一栏务必填写子链,</p><p>这会影响到之后文件的生成</p><p>例如请填写 <a href="https://zkeq.gitee.io/code/">https://zkeq.gitee.io/code/</a> 而不是 <a href="https://zkeq.gitee.io/">https://zkeq.gitee.io/</a></p><p><code>(由于gitee免费版无法绑定域名)</code></p><blockquote><p><strong>网站存放在子目录</strong></p><p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote></blockquote><p><strong>另一个重要配置,为了日后升级主题方便,请创建<code>独立的主题配置文件</code>(本节在第5节配置主题时操作…仅在此提及)</strong></p><ul><li>主题配置文件,安装主题后,会存在于<code>\themes\[theme]</code>此路径下的 <code>_config.yml</code>  即为<code>\themes\butterfly\_config.yml</code></li><li>我们要做的就是在根目录创建一个<code>_config.[theme].yml</code>文件,此文件存在时,主题目录下的<code>\themes\butterfly\_config.yml</code>所填写的内容会被覆盖</li><li>所以我们配置主题文件的时候,只需要修改<code>_config.[theme].yml</code>文件即可</li></ul><p>官方说明:</p><blockquote><p><strong>独立的 <code>_config.[theme].yml</code> 文件</strong></p><blockquote><p>该特性自 Hexo 5.0.0 起提供</p></blockquote><p>独立的主题配置文件应放置于站点根目录下，支持 <code>yml</code> 或 <code>json</code> 格式。需要配置站点 <code>_config.yml</code> 文件中的 <code>theme</code> 以供 Hexo 寻找 <code>_config.[theme].yml</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line"># _config.my-theme.yml</span><br><span class="line">bio: &quot;My awesome bio&quot;</span><br><span class="line">foo:</span><br><span class="line">  bar: &#x27;a&#x27;</span><br><span class="line"># themes/my-theme/_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们强烈建议你将所有的主题配置集中在一处。如果你不得不在多处配置你的主题，那么这些信息对你将会非常有用：Hexo 在合并主题配置时，Hexo 配置文件中的 <code>theme_config</code> 的优先级最高，其次是 <code>_config.[theme].yml</code> 文件，最后是位于主题目录下的 <code>_config.yml</code> 文件。</p></blockquote></blockquote><p><code>其余高阶选项请参阅:</code> <a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a></p><h3 id="小节4-解锁预览功能"><a href="#小节4-解锁预览功能" class="headerlink" title="小节4: 解锁预览功能"></a>小节4: 解锁预览功能</h3><p><strong>已经完成基本的功能了,虽然主题还是默认的<code>landscape</code>主题,但此时我们已经可以预览网站文件了!</strong></p><p>请在<code>Git Bash Here</code>中输入以下内容</p><ol><li><p><code>$ hexo cl</code>   # 即为删除hexo的缓存,(建议每次都要执行,以免引起不必要的麻烦) (<code>$ hexo clean</code>的简写)</p><p>​                清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p></li><li><p><code>$ hexo g</code>    # 创建缓存文件 (即为<code>$ hexo generate</code> 的简写,当有相同缩写插件时,建议输入全拼!)</p></li><li><p><code>$ hexo s</code>    # 启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。(<code>$ hexo server</code>的简写)</p></li></ol><p><strong>不出意外的话,现在你已经可以访问<a href="http://localhost:4000/">http://localhost:4000/</a> 看到刚刚创建的网站了.</strong></p><p><strong>上述命令还可以连起来写 <code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</code>  ,作为之后预览网站的快捷指令</strong></p><p><strong>还有一个常用的命令是<code>$ hexo deploy</code>, 即为生成静态网页文件,此命令执行后会生成public文件夹,其中的文件就是网站所产生的静态网页文件,部署即可访问.</strong></p><p><strong>命令也可简写为 <code>$ hexo d</code>,但是经过测试,此简写在安装豆瓣插件后,会失效(重名原因),需要写<code>$ hexo dep</code>才可以!</strong></p><blockquote><p><strong>deploy</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p></blockquote><p><strong>此命令也可连起来写  <code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo d</code>,但是装了豆瓣插件之后,我只能这样写 <code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo dep</code> .因为豆瓣插件的简写也是d!!</strong></p><p><strong>如何编写文章呢?</strong></p><ul><li>命令: <code>hexo new&#39;这个引号里面填写文章的标题&#39;</code></li><li>然后全部的文章文件将位于 <code>\source\posts</code>文件夹下</li><li>请使用md文件编辑器进行编辑</li><li>Typora付费前的最后一个版本参见此帖: [<a href="https://www.52pojie.cn/thread-1552190-1-1.html">多平台] Typora 0.11.18吾爱破解|安卓破解|病毒分析|www.52pojie.cn</a></li></ul><p>​    下载链接: <a href="https://www.aliyundrive.com/s/BYXmGd9U9QL">阿里云盘分享 (aliyundrive.com)</a></p><ul><li>然后就可以写文章啦!!</li><li>当然也可以采用在线编辑器 例如 <a href="https://markdowneditor.cn/">Markdown Editor在线编辑器 | MarkDown</a></li></ul><p>下面我们来讲一下如何安装主题…</p><h3 id="小节5-选择并部署主题"><a href="#小节5-选择并部署主题" class="headerlink" title="小节5: 选择并部署主题"></a>小节5: 选择并部署主题</h3><ol><li>首先去hexo主题页面选择一个主题 <a href="https://hexo.io/themes/">Themes | Hexo</a></li><li>接着按主题给的文档进行配置…</li><li>例如本站主题为 <a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a> </li><li>本站主题的文档为 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></li><li>这个文档已经写的非常详细了,这里仅对稍微有一些可能遇到的问题进行说明.</li></ol><blockquote><ol><li>此主题引用的字体图标为 [Font Awesome](<a href="https://fontawesome.com/v5.15/icons?from=io">Font Awesome</a>)  <code>Font Awesome Free 5.15.4 版本</code></li><li>修改时注意格式 </li><li>若发现修改后无法加载</li><li>请确认字体图标代码可在 <a href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css">https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css</a> 中找到</li></ol></blockquote><blockquote><ol><li>插入 <code>inject:</code>的  <code>head:</code> 或者  <code>bottom:</code> 即为在网站中插入文件时.</li><li>请在 <code>主题配置文件</code>中插入代码 例如  <code>- &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/css/black-white.css&quot;&amp;gt;</code></li><li>然后在<code>source</code>文件夹中创建<code>/css/black-white.css</code>即可(即为新建一个css文件夹,再新建一个<code>black-white.css</code>文件)</li><li>这个示例代码为将网站变为黑白,本文写于2021-11-13, 请铭记历史!</li><li><code>black-white.css</code>文件: <a href="https://coding.maylove.pub/css/black-white.css">https://coding.maylove.pub/css/black-white.css</a></li></ol></blockquote><blockquote><p>默认的文章排序为按时间排序,故不要将两个md文件的创建时间选择一样的!!</p></blockquote><blockquote><p>注意网站的语言配置文件,<code>要按主题给出的配置</code>,否则会出现无法正常显示中文的情况 例如<code>zh-CN</code> 不要写成 <code>ZH-CN </code>或者 <code>zh</code> (此条未经测试,反正你按规矩来就行….严谨一点还是好的~)</p></blockquote><blockquote><p>如果你认为每次都要修改.md文件的头部分感觉好麻烦.可以去 <code>scaffolds\post.md</code>文件中设置模板!</p></blockquote><blockquote><p>在此部分遇到的问题,需要提问时,请先阅读 <a href="https://questions.zkeq.xyz/#/">提问的智慧(中文版) (zkeq.xyz)</a> 中的内容  再提出问题!</p></blockquote><blockquote><p>使用<code>Butterfly</code>主题 <strong>添加全局播放器</strong> 请参阅<a href="https://butterfly.js.org/posts/507c070f/">Butterfly添加全局吸底Aplayer教程 | Butterfly</a></p><p>需要注意的是,经过本人测试,<strong>网易云的兼容性最好</strong>,请<strong>尽量使用网易云</strong>!</p><p>代码插入的部分为<code>主题配置文件 847-852</code>行!!!</p><p>示例:</p><p>inject:</p><p> head:</p><p>   - &lt;link rel=”stylesheet” href=”/css/black-white.css”&gt;</p><p> bottom:</p><p>   - &lt;div class=”aplayer no-destroy” data-id=”2116” data-server=”netease” data-type=”artist” data-fixed=”true” data-mini=”true” data-listFolded=”false” data-order=”random” data-preload=”none” data-autoplay=”true” muted&gt;&lt;/div&gt;</p><p>  <em># - &lt;script src=”xxxx”&gt;&lt;/script&gt;</em></p></blockquote><blockquote><p>安装豆瓣电影页面插件请参阅</p><p><a href="https://github.com/mythsman/hexo-douban">mythsman/hexo-douban: A simple plugin for hexo that helps us generate pages for douban books ,movies and games. (github.com)</a></p><p>若为<code>Butterfly</code>主题 请参阅文档</p><p><a href="https://github.com/jerryc127/butterfly-plugins/tree/main/hexo-butterfly-douban">butterfly-plugins/hexo-butterfly-douban at main · jerryc127/butterfly-plugins (github.com)</a></p><p><strong>hexo-butterfly-douba为</strong>butterfly适配的豆瓣插件!若为本主题 则推荐使用</p><blockquote><p>电影<br>电影界面使用了插件 hexo-butterfly-douban<br>使用方法请参考插件的文档。</p><p>注意：</p><p>hexo-butterfly-douban 会主动生成页面，所以不需要自己创建。<br>如遇到无法抓取问题，显示 INFO 0 movies have been loaded in xxx ms, because you are offline or your network is bad<br>请过段时间再试试，这我也无能为力。</p></blockquote></blockquote><blockquote><p>主题官方进阶教程 <a href="https://butterfly.js.org/posts/4073eda/">Butterfly 安裝文檔(六) 進階教程 | Butterfly</a></p></blockquote><blockquote><p>请配置<code>独立的主题配置文件</code>!!上文提及的那个!!!</p></blockquote><p><strong>到现在为止,你应该已经学会如何使用hexo生成静态资源了.即执行 <code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo d</code>后</strong></p><p><strong>在<code>public文件夹</code>中生成的文件,即为<code>需要进行部署</code>的<code>全部网站资源</code>,下面讲解如何部署</strong></p><h2 id="No-02-部署环境-服务器环境"><a href="#No-02-部署环境-服务器环境" class="headerlink" title="No.02 部署环境(服务器环境)"></a>No.02 部署环境(服务器环境)</h2><p>hexo为纯静态博客,也就是不需要后台的,我们只需要一个站点来存放我们生成的纯静态Html就可以了,所以推荐采用无服务器(即<code>Github Page</code> + <code>Gitee Page</code> + <code>Vercel</code> 部署).</p><ul><li>有服务器(<code>宝塔面板 bt.cn</code>)</li><li>无服务器(<code>Github Page</code> + <code>Gitee Page</code> + <code>Vercel</code>)</li></ul><h3 id="服务器版本部署环境"><a href="#服务器版本部署环境" class="headerlink" title="服务器版本部署环境"></a>服务器版本部署环境</h3><p>服务器版本较为简单,本文不再讲解,自行百度即可,即为如下步骤…</p><ol><li>安装宝塔 <a href="https://www.bt.cn/">宝塔面板 - 简单好用的Linux/Windows服务器运维管理面板 (bt.cn)</a><ul><li>Linux命令: <a href="https://www.bt.cn/bbs/thread-19376-1-1.html">宝塔Linux面板安装教程 - 2021年8月18日更新 - 7.7.0正式版 - Linux面板 - 宝塔面板论坛 (bt.cn)</a></li></ul></li><li>登录图形化控制台</li><li>创建站点</li><li>上传文件夹</li><li>部署证书之类的操作</li><li>完成!</li></ol><h3 id="无服务器版本部署环境"><a href="#无服务器版本部署环境" class="headerlink" title="无服务器版本部署环境"></a>无服务器版本部署环境</h3><h4 id="小节1-Github部署主要文件"><a href="#小节1-Github部署主要文件" class="headerlink" title="小节1: Github部署主要文件"></a>小节1: Github部署主要文件</h4><p><a href="https://github.com/">GitHub</a></p><ol><li>注册Github仓库</li><li>使用 <a href="https://desktop.github.com/">GitHub Desktop | Simple collaboration from your desktop</a></li><li>完成创建仓库,上传仓库的操作.</li><li>简单易懂.</li><li>使用教程 <a href="https://www.jianshu.com/p/06a960d991aa">0基础的git教程，傻瓜都会用的Github Desktop - 简书 (jianshu.com)</a></li></ol><h4 id="小节2-vercel引入Github仓库-生成主站"><a href="#小节2-vercel引入Github仓库-生成主站" class="headerlink" title="小节2: vercel引入Github仓库,生成主站"></a>小节2: vercel引入Github仓库,生成主站</h4><p><strong>(不用Github做主站的原因是Github.io国内解析不大稳定..)</strong></p><p><a href="https://vercel.com/dashboard">Dashboard – Vercel</a></p><ol><li>注册一个Vercel账户</li><li>点击导入自己名下的仓库</li><li>之后会让你选择试用团队,<strong>这里要点击 <code>Skip</code> <code>跳过</code>!!!, 否则两个星期之后,你要付费或者重新搞一遍,很搞心态的…</strong></li><li>之后Vercel会自动部署代码文件,并且免费版每天有40次自动部署机会…完全够用</li><li>然后就是配置域名啦,可以选择<code>vercel.app</code> 或者转到自己的域名</li><li>详情参见  <a href="https://vercel.com/docs/get-started">Create a New Project – Vercel Docs</a></li></ol><h4 id="小节3-Gitee创建国内镜像网站"><a href="#小节3-Gitee创建国内镜像网站" class="headerlink" title="小节3: Gitee创建国内镜像网站"></a>小节3: Gitee创建国内镜像网站</h4><p><a href="https://gitee.com/">Gitee - 基于 Git 的代码托管和研发协作平台</a></p><p>此节参见下面的教程…</p><p><strong>带很多#号的是大多是时候仅需要执行一次的命令…</strong></p><blockquote><p>Git本地代码上传到远程仓库<br>1、进入项目地址，通过命令git init将项目初始化成git本地仓库<br>################<code>git init(仅需要首次执行)</code><br>2、将项目内所有文件都添加到暂存区<br><code>git add .</code><br>3、该命令会将git add .存入暂存区修改内容提交至本地仓库中，若文件未添加至暂存区，则提交时不会提交任何修改。<br><code>git commit -m &#39;update&#39;</code>   //xxx是备注名<br>4、在github上新建一个仓库，复制仓库地址，然后使用命令将本地仓库与远程仓库建立连接<br>################（4.1）<code>git remote add origin  xxx (仅需要首次执行)</code>      //xxx是git仓库的地址<br>################（4.2）4.1这个步骤可能出现错误 提示fatal: remote origin already exists<br>################         执行：git remote rm origin (仅需要首次执行) <strong>命令</strong><br>################（4.3）再执行（4.1）的命令<br>5、把暂存区的代码推到远程仓库<br><code>git push -u origin master</code></p><p>// 若Github不通 ,可设置代理.如下所示</p><p>//首先，设置默认代理，也可以理解为清除代理<br>git config –global –unset http.proxy<br>git config –global –unset https.proxy</p><p>//设置代理<br>git config –global http.proxy “192.168.10.4:7890”<br>git config –global https.proxy “192.168.10.4:7890”</p></blockquote><p>日常用到的仅有3行 即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&#x27;update&#x27;</span>   </span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p><strong>记得每次上传之后,需要自行去Gitee重新部署Page页面…</strong> (<code>Github和Vercel则不需要,自动部署的!</code>)</p><h1 id="总结以及备忘"><a href="#总结以及备忘" class="headerlink" title="总结以及备忘"></a>总结以及备忘</h1><p><strong>肯定会用到的功能</strong></p><p><strong>创建文章及发布</strong></p><p><strong>创建</strong></p><ol><li><p>使用git在hexo目录打开命令行模式</p></li><li><p>输入代码 <code>hexo new &#39;这里是文章的标题&#39;</code>   #单引号内部的文字可以随意改动</p></li><li><p>之后 会看到<code>\source\_posts</code>目录下多了一个刚才的标题文件(md格式的)</p></li><li><p>打开这个md文件,进行相关修改</p><ul><li><p>Front-matter 为文件最上方的 那一块 : <code>&#39;---&#39;和 &#39;---&#39;中间的内容</code></p></li><li><p><strong>Front-matter 选项详解</strong></p><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><p><strong>最简示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: typora-vue-theme主题介绍</span><br><span class="line">date: 2018-09-07 09:25:00</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>最全示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: typora-vue-theme主题介绍</span><br><span class="line">date: 2018-09-07 09:25:00</span><br><span class="line">author: 赵奇</span><br><span class="line">img: /source/images/xxx.jpg</span><br><span class="line">top: true</span><br><span class="line">hide: false</span><br><span class="line">cover: true</span><br><span class="line">coverImg: /images/1.jpg</span><br><span class="line">password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span><br><span class="line">toc: false</span><br><span class="line">mathjax: false</span><br><span class="line">summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span><br><span class="line">categories: Markdown</span><br><span class="line">tags:</span><br><span class="line">  - Typora</span><br><span class="line">  - Markdown</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>正文</strong></p><ul><li>修改文章的内容部分:即为 ‘—‘下方的所有部分</li><li>具体markdown语法参考<ul><li><a href="https://www.typora.io/">https://www.typora.io/</a> 电脑端本地编辑器(可快捷键  本文档即为typora制作)</li><li><a href="https://markdowneditor.cn/">https://markdowneditor.cn/</a> 在线编辑器</li></ul></li><li>可用 <code>&amp;lt;center&amp;gt;   &amp;lt;/center&amp;gt;</code>命令中间包裹字符进行居中(不支持标题居中)</li><li>可以用<code>&amp;lt;br&amp;gt;</code>单个标签进行换行</li><li>插入图片可前往 <a href="https://pic.onji.cn/tencent.html">https://pic.onji.cn/tencent.html</a> 上传文件</li></ul><p><strong>发布</strong></p><ol><li><p>使用git打开hexo根目录</p></li><li><p>输入命令</p></li><li><p>```<br>hexo cl  # 清理缓存<br>hexo g   # 生成缓存<br>hexo d   # 生成本地文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   另, 使用 `hexo s` 命令可生成**本地站预览**</span><br><span class="line"></span><br><span class="line">   另, 命令直接可使用`&amp;&amp;符号`进行一次性输入</span><br><span class="line"></span><br><span class="line">4. 输入上述命令后 如无报错 则说明生成成功</span><br><span class="line"></span><br><span class="line">5. 将public上传至github即可访问</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">**GitHub`和`gitee`以及`vercel`的相关配置**</span><br><span class="line"></span><br><span class="line">- GitHub建议使用GitHub Desktop 下载地址: https://desktop.github.com/</span><br><span class="line"></span><br><span class="line">**使用git命令推送文件到GitHub或gitee**</span><br><span class="line"></span><br><span class="line">&gt; Git本地代码上传到远程仓库</span><br><span class="line">&gt; 1、进入项目地址，通过命令git init将项目初始化成git本地仓库</span><br><span class="line">&gt; `git init`  (此命令仅初始化仓库时使用,只使用一次即可..)</span><br><span class="line">&gt; 2、将项目内所有文件都添加到暂存区</span><br><span class="line">&gt; `git add .`  **(日常执行操作)**</span><br><span class="line">&gt; 3、该命令会将git add .存入暂存区修改内容提交至本地仓库中，若文件未添加至暂存区，则提交时不会提交任何修改。</span><br><span class="line">&gt; `git commit -m &#x27;update&#x27;`   //xxx是备注名  **(日常执行操作)**</span><br><span class="line">&gt; 4、在github上新建一个仓库，复制仓库地址，然后使用命令将本地仓库与远程仓库建立连接</span><br><span class="line">&gt; （4.1）`git remote add origin  xxx`       //xxx是git仓库的地址   (此命令仅第一次或报错时重置使用)</span><br><span class="line">&gt; （4.2）4.1这个步骤可能出现错误 提示fatal: remote origin already exists</span><br><span class="line">&gt; 执行：`git remote rm origin`命令  (此命令仅第一次或报错时重置使用)</span><br><span class="line">&gt; （4.3）再执行（4.1）的命令</span><br><span class="line">&gt; 5、把暂存区的代码推到远程仓库</span><br><span class="line">&gt; `git push -u origin master`  **(日常执行操作)**</span><br><span class="line"></span><br><span class="line">- **即 日常提交时 只需要三行代码!!!!!**</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line">**GitHub相关配置**</span><br><span class="line"></span><br><span class="line">**设置github page**</span><br><span class="line"></span><br><span class="line">- 在设置页启用GitHub Page</span><br><span class="line">- 若无域名可使用默认分配的域名 即为:`用户名.github.io/仓库名`(若仓库名和用户名相同则不需要加后缀仓库名也可访问)</span><br><span class="line">- 若有域名则填写自己的域名 再去域名提供商将域名解析为`CANME` 并把地址改为 `用户名.github.io`(示例:zkeq.github.io)</span><br><span class="line"></span><br><span class="line">**`vercel`的相关配置**</span><br><span class="line"></span><br><span class="line">- 去vercel官网按步骤一步一步来,,,不要创建团队就不会收费</span><br><span class="line">- 然后去域名那里创建自己的域名</span><br><span class="line">- 可选域名为 `自定义字符.vercel.app`(需要无人占用时才可正常设置)</span><br><span class="line">- 自定义域名流程同githubpage</span><br><span class="line">- 注意:第一次部署之后 每次Github仓库更新后 vercl会自动进行更新</span><br><span class="line">- 免费版每天最多自动更新40次(够用了我感觉...)</span><br><span class="line"></span><br><span class="line">**Gitee相关配置**</span><br><span class="line"></span><br><span class="line">- `github`上传代码后会自动更新`github page`</span><br><span class="line">- Gitee则不会, 需要进入官网gitee.com自行更新页面</span><br><span class="line"></span><br><span class="line">**可能会用到的功能**</span><br><span class="line"></span><br><span class="line">**哔哩哔哩视频插入链接**</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&amp;lt;div style=&quot;position: relative; padding: 30% 45%;&quot;&amp;gt;</span><br><span class="line">&amp;lt;iframe style=&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot; src=&quot;https://player.bilibili.com/player.html?aid=64141610&amp;bvid=BV134411f7xX&amp;cid=111338369&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0&quot; frameborder=&quot;no&quot; scrolling=&quot;no&quot;&amp;gt;&amp;lt;/iframe&amp;gt;</span><br><span class="line">&amp;lt;/div&amp;gt;</span><br></pre></td></tr></table></figure></li></ol><p>其中src字段的内容自行替换为哔哩哔哩的内嵌字符</p><p>例如官方给的是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>iframe src=&quot;//player.bilibili.com/player.html?aid=244350329&amp;bvid=BV1rv411y71Q&amp;cid=225785161&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;<span class="symbol">&amp;gt;</span> <span class="symbol">&amp;lt;</span>/iframe<span class="symbol">&amp;gt;</span></span><br></pre></td></tr></table></figure><p>此时我们就只需</p><p><code>//player.bilibili.com/player.html?aid=244350329&amp;bvid=BV1rv411y71Q&amp;cid=225785161&amp;page=1</code></p><p>这一段内容 将它复制到上文div中即为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>div style=&quot;position: relative; padding: 30% 45%;&quot;<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>iframe style=&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot; src=&quot;//player.bilibili.com/player.html?aid=244350329&amp;bvid=BV1rv411y71Q&amp;cid=225785161&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0&quot; frameborder=&quot;no&quot; scrolling=&quot;no&quot;<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/iframe<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>/div<span class="symbol">&amp;gt;</span></span><br></pre></td></tr></table></figure><p>配置完成</p><p><strong>赞赏码配置</strong></p><ul><li><p>自行去<code>_config.matery.yml</code>第171到176行修改相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 是否激活文章末尾的打赏功能，默认激活（你替换为的你自己的微信、支付宝二维码图片、或者使用网络图片也可以）.</span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line">  enable: false</span><br><span class="line">  title: 你的赏识是我前进的动力</span><br><span class="line">  wechat: /medias/reward/wechat.png</span><br><span class="line">  alipay: /medias/reward/alipay.jpg</span><br></pre></td></tr></table></figure></li></ul><p><strong>小图标设置</strong></p><ul><li>去<a href="https://fa5.dashgame.com/#/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E6%89%BE%E5%88%B0%E6%96%B0%E5%9B%BE%E6%A0%87%E5%AF%B9%E5%BA%94%E7%9A%84%E5%80%BC">https://fa5.dashgame.com/#/这个网站找到新图标对应的值</a></li><li>更改(请注意:  <code>请保留 fas fa-字符</code>!!!!!   只需要更改后面的字符)<ul><li>有些对应不上..不知道什么原因,</li><li>可自行前往<code>\themes\matery\source\libs\awesome</code>文件夹修改相关文件</li></ul></li></ul><p>更多配置文件请前往<code>_config.matery.yml</code>文件和 <code>_config</code>文件修改</p><blockquote><p>网易云的音乐引用直链(付费不可用) <a href="http://music.163.com/song/media/outer/url?id=%E8%BF%99%E9%87%8C%E5%A1%AB%E6%AD%8C%E6%9B%B2id.mp3">http://music.163.com/song/media/outer/url?id=这里填歌曲id.mp3</a></p></blockquote><blockquote><p>若文件使用禁止盗链的话,可以解析一个DNS地址为127.0.0.1,这样就可以<code>在本地预览时不触发防盗链</code>啦</p></blockquote><blockquote><p>视频插入代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>video width=&quot;100%&quot; height=&quot;100%&quot; controls=&quot;&quot;<span class="symbol">&amp;gt;</span></span><br><span class="line">    <span class="symbol">&amp;lt;</span>source src=&quot;url.mp4&quot; type=&quot;video/mp4&quot; /<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>/video<span class="symbol">&amp;gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <summary type="html">这篇文章是自己使用Hexo这几个月自己总结出来的教程</summary>
    
    
    
    <category term="CMD" scheme="https://coding.maylove.pub/categories/CMD/"/>
    
    
    <category term="笔记" scheme="https://coding.maylove.pub/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 百度贴吧爬虫</title>
    <link href="https://coding.maylove.pub/2021/a479961a4ae9/"/>
    <id>https://coding.maylove.pub/2021/a479961a4ae9/</id>
    <published>2021-11-30T07:28:19.000Z</published>
    <updated>2021-12-11T16:35:14.533Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-30/2.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tieba</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.url = <span class="string">&#x27;https://tieba.baidu.com/f?kw=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">        self.heardes = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 5.00; Windows 98)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        response = requests.get(url, headers=self.heardes)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;temp.html&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line">        <span class="keyword">return</span> response.content</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_data</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="comment"># 创建element对象</span></span><br><span class="line">        <span class="comment"># data = data.decode().replace(&quot;&lt;!--&quot;, &quot;&quot;)</span></span><br><span class="line">        html = etree.HTML(data)</span><br><span class="line">        el_list = html.xpath(<span class="string">&#x27;//li[@class=&quot; j_thread_list clearfix thread_item_box&quot;]/div/div[2]/div[1]/div[1]/a&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(el_list))</span><br><span class="line"></span><br><span class="line">        data_list = []</span><br><span class="line">        <span class="keyword">for</span> el <span class="keyword">in</span> el_list:</span><br><span class="line">            temp = &#123;&#125;</span><br><span class="line">            temp[<span class="string">&#x27;title&#x27;</span>] = el.xpath(<span class="string">&quot;./text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            temp[<span class="string">&#x27;link&#x27;</span>] = <span class="string">&#x27;https://tieba.baidu.com&#x27;</span> + el.xpath(<span class="string">&quot;./@href&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            data_list.append(temp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取下一页url</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            next_url = <span class="string">&#x27;https:&#x27;</span> + html.xpath(<span class="string">&#x27;//a[contains(text(),&quot;下一页&gt;&quot;)]/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            next_url = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> data_list, next_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_data</span>(<span class="params">self, data_list</span>):</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;temp.json&quot;</span>, <span class="string">&quot;a+&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data_temp = json.dumps(data, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">                <span class="built_in">print</span>(data_temp)</span><br><span class="line">                f.write(data_temp)</span><br><span class="line">            <span class="comment">#     f.write(data)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># url</span></span><br><span class="line">        <span class="comment"># hearders</span></span><br><span class="line">        next_url = self.url</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 发送请求,获取响应</span></span><br><span class="line">            data = self.get_data(self.url)</span><br><span class="line">            <span class="comment"># 从相应中提取数据(数据和翻页用的url)</span></span><br><span class="line">            data_list, next_url = self.parse_data(data)</span><br><span class="line"></span><br><span class="line">            self.save_data(data_list)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(next_url)</span><br><span class="line">            <span class="comment"># 判断是否终结</span></span><br><span class="line">            <span class="keyword">if</span> next_url == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tieba = Tieba(<span class="string">&quot;华东理工大学吧&quot;</span>)</span><br><span class="line">    tieba.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;如何发送请求获取网页响应以及解析网页.</summary>
    
    
    
    <category term="编程练习" scheme="https://coding.maylove.pub/categories/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="Python" scheme="https://coding.maylove.pub/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>笔记|使用WSL安装Linux系统并搭建本地局域网网盘</title>
    <link href="https://coding.maylove.pub/2021/861b10ea3685/"/>
    <id>https://coding.maylove.pub/2021/861b10ea3685/</id>
    <published>2021-11-26T14:56:25.000Z</published>
    <updated>2021-11-27T04:46:38.368Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h4><ul><li>发现自己的win11已经安装了一个wsl,就想折腾一下..</li><li>但是明明zfile有win版的,为啥还要多此一举呢?<ul><li><code>害, 就是瞎折腾呗....</code></li></ul></li></ul><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><ol><li>应用商店搜索WSL选择安装的系统</li><li>安装zfile: <a href="https://docs.zfile.vip/">https://docs.zfile.vip</a></li><li>安装之后发现只能通过虚拟机ip在本机访问</li><li>但是想要实现其他设备访问网盘的需求,于是需要 <code>端口转发</code></li></ol><h4 id="liunx-zfile常用命令"><a href="#liunx-zfile常用命令" class="headerlink" title="liunx zfile常用命令"></a>liunx zfile常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/zfile/bin/start.sh       # 启动项目</span><br><span class="line">~/zfile/bin/stop.sh        # 停止项目</span><br><span class="line">~/zfile/bin/restart.sh     # 重启项目</span><br></pre></td></tr></table></figure><h4 id="Powershell设置端口转发"><a href="#Powershell设置端口转发" class="headerlink" title="Powershell设置端口转发"></a>Powershell设置端口转发</h4><h5 id="liunx查看ip"><a href="#liunx查看ip" class="headerlink" title="liunx查看ip"></a>liunx查看ip</h5><ol><li><code>ip a</code></li><li>记录下虚拟机的ip以及对应的端口</li></ol><h5 id="设置端口转发"><a href="#设置端口转发" class="headerlink" title="设置端口转发"></a>设置端口转发</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">81</span> listenaddress=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> connectport=<span class="number">8080</span> connectaddress=<span class="number">172</span>.<span class="number">19</span>.<span class="number">235</span>.<span class="number">47</span> protocol=tcp</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=【宿主机windows平台监听端口】 listenaddress=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> connectport=【wsl2平台监听端口】 connectaddress=【wsl2平台ip】protocol=tcp</span><br></pre></td></tr></table></figure><h5 id="查看转发状态"><a href="#查看转发状态" class="headerlink" title="查看转发状态"></a>查看转发状态</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure><h5 id="删除端口转发"><a href="#删除端口转发" class="headerlink" title="删除端口转发"></a>删除端口转发</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=【宿主机windows平台监听端口】 listenaddress=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以了.</p>]]></content>
    
    
    <summary type="html">使用win11的wsl功能安装了linux系统ubuntn.&lt;br&gt;实现在win11下使用linux系统搭建的本地网盘来访问Windows的文件看电影的需求。</summary>
    
    
    
    <category term="CMD" scheme="https://coding.maylove.pub/categories/CMD/"/>
    
    
    <category term="笔记" scheme="https://coding.maylove.pub/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java HelloWorld 案例</title>
    <link href="https://coding.maylove.pub/2021/747651b2c4dd/"/>
    <id>https://coding.maylove.pub/2021/747651b2c4dd/</id>
    <published>2021-11-22T08:46:44.000Z</published>
    <updated>2021-11-22T08:50:58.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><p>创建并打开<code>HelloWorld.java</code>并书写以下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译并运行程序"><a href="#编译并运行程序" class="headerlink" title="编译并运行程序"></a>编译并运行程序</h4><ol><li><strong>进入文件根目录</strong></li><li> <code>javac HelloWorld.java</code></li><li><code>java HelloWorld</code></li></ol><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Java HelloWorld 案例的书写和运行</summary>
    
    
    
    <category term="Java" scheme="https://coding.maylove.pub/categories/Java/"/>
    
    
    <category term="编程练习" scheme="https://coding.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python 实战爬虫分析案例(自用)</title>
    <link href="https://coding.maylove.pub/2021/e0cd99104e32/"/>
    <id>https://coding.maylove.pub/2021/e0cd99104e32/</id>
    <published>2021-11-21T04:04:09.000Z</published>
    <updated>2021-12-11T16:37:08.027Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-21/carbon_night_owl.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 引入json库</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 引入正则库,字符串搜索</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 引入提取网页的xpath库</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">path, data</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        _data = json.dumps(data, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        f.write(_data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先定义一个列表,作为第一层列表使用.(后面还有排序,去重什么的)</span></span><br><span class="line">list_end = []</span><br><span class="line"><span class="comment"># 这里进入一个循环,即为html的文件名 *.html ,左等右不等</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">48</span>):</span><br><span class="line">    <span class="comment"># 定义html的文件路径</span></span><br><span class="line">    path = <span class="string">&#x27;data/%s.html&#x27;</span> % i</span><br><span class="line">    <span class="comment"># 以utf-8的格式打开html文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 读取html文件</span></span><br><span class="line">    st = f.read()</span><br><span class="line">    <span class="comment"># 将html文件加载到etree中并赋值,之后可使用xpath操作</span></span><br><span class="line">    html = etree.HTML(st)</span><br><span class="line">    <span class="comment"># 定义一个临时列表</span></span><br><span class="line">    all_list = []</span><br><span class="line">    <span class="comment"># 获取 题目id,非字符串,为一个element对象</span></span><br><span class="line">    _<span class="built_in">id</span> = html.xpath(<span class="string">&#x27;/html/body/div[2]/div[2]/div/table/tbody/tr&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取 标题和答案(这里放在一起写了,因为分开写合并的时候逻辑很混乱,很麻烦)</span></span><br><span class="line">    title = html.xpath(<span class="string">&#x27;//*//font&#x27;</span>)</span><br><span class="line">    <span class="comment"># 定义两个变量为接下来的循环做铺垫</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 为分隔符做准备</span></span><br><span class="line">    c = <span class="string">&#x27;、&#x27;</span></span><br><span class="line">    <span class="comment"># 以id的长度进行循环 id 和 title的值都为个数 *4...,因为id有空集(下文会去除)</span></span><br><span class="line">    <span class="comment"># print(len(_id))</span></span><br><span class="line">    <span class="comment"># print(len(title))</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(_<span class="built_in">id</span>)):</span><br><span class="line">        <span class="comment"># 每次循环a的值+1(下面会有),即为遍历title,</span></span><br><span class="line">        new_title = title[a]</span><br><span class="line">        <span class="comment"># 判断title是标题还是选项(因为标题全部都含有顿号....本来想用数字判断..写的太长逻辑没接上....</span></span><br><span class="line">        <span class="comment"># 所以这就要求选项中不可含有顿号,否则会被识别成标题,这之后的所以选项都会乱掉的....</span></span><br><span class="line">        <span class="comment"># 嘻嘻后来我找到方法了.....折腾了很长时间)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;、&#x27;</span> <span class="keyword">in</span> new_title.text <span class="keyword">and</span> <span class="built_in">bool</span>(re.search(<span class="string">r&#x27;\d&#x27;</span>, new_title.text)):</span><br><span class="line">            <span class="comment"># print(c)</span></span><br><span class="line">            <span class="comment"># 判断是否含有题号,有则删除题号</span></span><br><span class="line">            c = c.split(sep=<span class="string">&#x27;、&#x27;</span>, maxsplit=-<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 如果首项有为数字则为题号</span></span><br><span class="line">            <span class="keyword">if</span> c[<span class="number">0</span>].isdigit():</span><br><span class="line">                <span class="comment"># 删除首项</span></span><br><span class="line">                c.remove(c[<span class="number">0</span>])</span><br><span class="line">                <span class="comment"># 再恢复原来的状态</span></span><br><span class="line">                <span class="comment"># print(c)</span></span><br><span class="line">                c = <span class="string">&#x27;、&#x27;</span>.join(c)</span><br><span class="line">                <span class="comment"># print(c)</span></span><br><span class="line">            <span class="comment"># 是标题的话就传入列表中,为什么这样写呢?</span></span><br><span class="line">            <span class="comment"># 是因为这是从第二个循环开始写的</span></span><br><span class="line">            <span class="comment"># 因为标题进入1次,选项要进入4次</span></span><br><span class="line">            <span class="comment"># 而我们只需要保存一次就行了</span></span><br><span class="line">            <span class="comment"># 所以我们就是第一次循环的时候,保存一个0的值,</span></span><br><span class="line">            <span class="comment"># 第二次循环到标题才会保存接下来赋予的标题和选项的值</span></span><br><span class="line">            all_list.append(c)</span><br><span class="line">            <span class="comment"># print(all_list)</span></span><br><span class="line">            <span class="comment"># 这就是赋予标题的值</span></span><br><span class="line">            <span class="comment"># 这个text是因为 上面说过了,这个new_titile并不是一个字符串,而是一个对象类型</span></span><br><span class="line">            c = new_title.text</span><br><span class="line">        <span class="comment"># 判断不是标题的时候执行逻辑</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 判断是否是标题中是否单独存在数字或者顿号,如果有就提示</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">bool</span>(re.search(<span class="string">r&#x27;\d&#x27;</span>, new_title.text)) <span class="keyword">or</span> <span class="string">&#x27;、&#x27;</span> <span class="keyword">in</span> new_title.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;请确认这不是标题 || &#x27;</span>, new_title.text)</span><br><span class="line">            <span class="comment"># 这里就是单竖杠将标题和选项隔开,然后选项之间是双竖杠隔开</span></span><br><span class="line">            c += <span class="string">&#x27;|&#x27;</span> + new_title.text</span><br><span class="line">            <span class="comment"># 因为标题会由很多的空格和换行符,这里要全部去掉(&#x27;、&#x27;不要去,前面用到了)</span></span><br><span class="line">            <span class="comment"># print(c)</span></span><br><span class="line">            c = c.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># # print(new_title)</span></span><br><span class="line">        <span class="comment"># 将a的值+1,也就是遍历的过程</span></span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    <span class="comment"># # print(all_list)</span></span><br><span class="line">    <span class="comment"># 将上面赋予列表的第一个没有意义的&#x27;第一个列表&#x27;去掉</span></span><br><span class="line">    all_list.remove(all_list[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 因为这时候标题只剩了99个了,也就是最后一个标题没有获取到</span></span><br><span class="line">    <span class="comment"># 然后这里就是再加一个没有用的东西,用于和选项合并的时候不会报错</span></span><br><span class="line">    <span class="comment"># 后面加了判断,就是后面如果发现这个东西,就进入下一次循环</span></span><br><span class="line">    <span class="comment"># 这条数据就废弃了,但是因为数据有很多条,就是样本足够多的话,肯定可以再找到相同的数据的</span></span><br><span class="line">    all_list.append(<span class="string">&#x27;##$%#%$#%$#$@$$%^#%$@#%$!#^$%$#^%&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(all_list)</span></span><br><span class="line">    <span class="comment"># 以上为标题和选项</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下为id的获取</span></span><br><span class="line">    <span class="comment"># 再次给a赋值为0,再次进行循环(a是老工具人了hh)</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 再定义一个临时列表(好像这是第三个了....)</span></span><br><span class="line">    list_temp = []</span><br><span class="line">    <span class="comment"># 再循环一遍id的长度....</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(_<span class="built_in">id</span>)):</span><br><span class="line">        <span class="comment"># 获取到id</span></span><br><span class="line">        <span class="comment"># 因为range是从1开始的,但我们取列表需要从0开始,所以用a(好像可以直接循环,但是那时候我没写.)</span></span><br><span class="line">        <span class="comment"># 这个获取到的东西是 &#123;&#x27;id&#x27;: &#x27;topicid_XXXXXXX&#x27;&#125; 或者为 &#123;&#125;</span></span><br><span class="line">        id_num = <span class="built_in">dict</span>(_<span class="built_in">id</span>[a].attrib)</span><br><span class="line">        <span class="comment"># 将获取到的东西传入临时列表,准备做去除空集处理</span></span><br><span class="line">        list_temp.append(id_num)</span><br><span class="line">        <span class="comment"># 遍历</span></span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下为去除空集 用emd的原因是我认为快到end了但是感觉还没到...</span></span><br><span class="line">    list_emd = []</span><br><span class="line">    <span class="comment"># 即为对上面的临时列表进行循环</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> list_temp:</span><br><span class="line">        <span class="comment"># 去除标题的所有空id集合,使其总数为100</span></span><br><span class="line">        <span class="comment"># print(x)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bool</span>(x):</span><br><span class="line">            <span class="comment"># print(x)</span></span><br><span class="line">            <span class="comment"># 去除空元素</span></span><br><span class="line">            list_emd.append(x)</span><br><span class="line">    <span class="comment"># print(len(list_emd))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再循环,这时循环的是去掉空集之后的标题,即为100</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_emd)):</span><br><span class="line">        <span class="comment"># print(index)</span></span><br><span class="line">        <span class="comment"># 将题目与选项合并后的东西传入emd中...即为列表套字典(格式需要)</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;question_txt&#x27;</span>] = all_list[index]</span><br><span class="line">        <span class="comment"># 添加占位符, 方便手动输入答案</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;answer&#x27;</span>] = <span class="string">&#x27;正确答案填在此&#x27;</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;answer_check_1&#x27;</span>] = <span class="string">&#x27;检验成员1的答案&#x27;</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;answer_check_2&#x27;</span>] = <span class="string">&#x27;检验成员2的答案&#x27;</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;answer_check_3&#x27;</span>] = <span class="string">&#x27;检验成员3的答案&#x27;</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;answer_check_4&#x27;</span>] = <span class="string">&#x27;检验成员4的答案&#x27;</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;answer_check_5&#x27;</span>] = <span class="string">&#x27;检验成员5的答案&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 没啥用,就是好看,做个提示而已(跟原来格式保持一致....)(但是没啥用)</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;answer_txt&#x27;</span>] = <span class="string">&#x27;使用说明：将正确答案填入answer的引号中就可，多选不用间隔，示例 *A* *ABCD*&#x27;</span></span><br><span class="line">        list_emd[index][<span class="string">&#x27;id&#x27;</span>] = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">        <span class="keyword">del</span> list_emd[index][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    <span class="comment"># print(len(list_emd))</span></span><br><span class="line">    <span class="comment"># 将每次循环html文件得到的内容传入列表中,即为列表套列表套字典..</span></span><br><span class="line">    list_end.append(list_emd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(list_end)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new_list = sorted(all_list, key=(lambda r: r[&#x27;id&#x27;]))</span></span><br><span class="line"><span class="comment"># 将列表套列表套字典转换为列表套字典</span></span><br><span class="line">list_end = <span class="built_in">sum</span>(list_end, [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deletedup</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="comment"># 定义一个集合</span></span><br><span class="line">    seen = <span class="built_in">set</span>()</span><br><span class="line">    <span class="comment"># 定义空集</span></span><br><span class="line">    new_list_2 = []</span><br><span class="line">    <span class="built_in">print</span>(li)</span><br><span class="line">    <span class="comment"># 对于传入的参数进行循环处理</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> li:</span><br><span class="line">        <span class="comment"># 即为利用id来去重</span></span><br><span class="line">        <span class="comment"># d1 = d[&#x27;id&#x27;]</span></span><br><span class="line">        d2 = d[<span class="string">&#x27;question_txt&#x27;</span>]</span><br><span class="line">        <span class="comment"># 这里就是上文所说的去掉</span></span><br><span class="line">        str1 = d[<span class="string">&#x27;question_txt&#x27;</span>]</span><br><span class="line">        <span class="comment"># 其实也不是去掉,就是进入下一个循环,就是不传.</span></span><br><span class="line">        <span class="keyword">if</span> str1 == <span class="string">&#x27;##$%#%$#%$#$@$$%^#%$@#%$!#^$%$#^%&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># print(d1)</span></span><br><span class="line">        <span class="comment"># print(seen)</span></span><br><span class="line">        <span class="comment"># 如果没有这个元素才传入,有就不传</span></span><br><span class="line">        <span class="keyword">if</span> d2 <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            <span class="comment"># print(d1)</span></span><br><span class="line">            <span class="comment"># 传入元素</span></span><br><span class="line">            new_list_2.append(d)</span><br><span class="line">            <span class="comment"># 传入集合中,是不是集合意义不大,因为不同页面的题号不同,所有肯定不一样</span></span><br><span class="line">            seen.add(d2)</span><br><span class="line">    <span class="comment"># 返回去重之后的列表</span></span><br><span class="line">    <span class="keyword">return</span> new_list_2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 对于得到的列表去重</span></span><br><span class="line">    list_tools = deletedup(list_end)</span><br><span class="line">    <span class="comment"># 打印信息,完成任务,下一步去格式化就好啦!</span></span><br><span class="line">    <span class="comment"># print(new_list_2)</span></span><br><span class="line">    <span class="comment"># new_list = sorted(list_tools, key=lambda r: r[&#x27;id&#x27;])</span></span><br><span class="line">    <span class="built_in">print</span>(list_tools)</span><br><span class="line">    <span class="comment"># 打印警告信息和统计信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;总计:&#x27;</span>, <span class="built_in">len</span>(list_tools), <span class="string">&#x27;条数据&#x27;</span>, <span class="string">&#x27;\n注意:请划到顶部确认那些东西是不是标题!!!!&#x27;</span>)</span><br><span class="line">    out_result = write(<span class="string">&#x27;result.json&#x27;</span>, list_tools)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是否成功写入result.json文件:&#x27;</span>, out_result)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">河南宗教脚本爬虫分析自动化脚本.</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="实战案例" scheme="https://coding.maylove.pub/tags/%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 创建学习知识库</title>
    <link href="https://coding.maylove.pub/2021/f4e13f654cb7/"/>
    <id>https://coding.maylove.pub/2021/f4e13f654cb7/</id>
    <published>2021-11-16T16:20:44.000Z</published>
    <updated>2021-11-22T08:45:46.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h3><ul><li><a href="https://javadocs.zkeq.xyz/">https://javadocs.zkeq.xyz</a></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>方便自己日后学习</li><li>本页面仅记录自己写的代码, 知识库中存在的不再重复…</li></ul><blockquote><p><strong>还是要多把精力放在文化课上哈…</strong></p></blockquote>]]></content>
    
    
    <summary type="html">为了方便自己的学习,创建了一个</summary>
    
    
    
    <category term="Java" scheme="https://coding.maylove.pub/categories/Java/"/>
    
    
    <category term="知识库" scheme="https://coding.maylove.pub/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Python 线程</title>
    <link href="https://coding.maylove.pub/2021/fcde66a536a1/"/>
    <id>https://coding.maylove.pub/2021/fcde66a536a1/</id>
    <published>2021-11-13T14:53:13.000Z</published>
    <updated>2021-11-13T14:54:38.649Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><p>Python学累了,想学Java html js vue Tailwindcss 小程序  c4d ae pr 了.</p></blockquote><h4 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h4><ul><li>进程吸收资源</li><li>传递给线程执行业务逻辑</li></ul><h4 id="线程与进程的关系"><a href="#线程与进程的关系" class="headerlink" title="线程与进程的关系"></a>线程与进程的关系</h4><ul><li>吃饭获得能量和营养(进程), 之后大脑执行逻辑(线程)</li><li>进程提供线程执行程序的前置要求,线程在重组的资源配备下,去执行程序</li></ul><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><ul><li>开启一个浏览器后,从浏览器(主进程)中创建出多个线程来开启多个页面</li></ul><h4 id="多线程的执行方式"><a href="#多线程的执行方式" class="headerlink" title="多线程的执行方式"></a>多线程的执行方式</h4><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-13/1.jpg" alt="1"></p><blockquote><h5 id="一、什么是线程"><a href="#一、什么是线程" class="headerlink" title="一、什么是线程"></a>一、什么是线程</h5><p>线程（Thread）是操作系统最小的执行单元，进程至少由一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。有些进程还不止同时干一件事，比如微信，它可以同时进行语音、发文字、浏览信息等事情。</p><p>简单理解：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程。</p><h5 id="二、怎样的任务算一个线程"><a href="#二、怎样的任务算一个线程" class="headerlink" title="二、怎样的任务算一个线程"></a>二、怎样的任务算一个线程</h5><p>进程被运行后算是一个线程，进程是不运行的，线程才会运行，而一个进程有多个线程就涉及到进程有多少可以被cpu单独调用的模块，这个调用的模块可以通过手动创建线程来建立。</p><h5 id="三、在python中如何创建线程"><a href="#三、在python中如何创建线程" class="headerlink" title="三、在python中如何创建线程"></a>三、在python中如何创建线程</h5><ul><li><p>使用的模块：<code>threading</code></p></li><li><p>创建的方法：<code>threading.Thread(…)</code></p></li></ul><p>代码如下：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-13/2.jpg" alt="2"></p></blockquote>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;线程的基础知识</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="进程与线程" scheme="https://coding.maylove.pub/tags/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 进程</title>
    <link href="https://coding.maylove.pub/2021/eab0079965df/"/>
    <id>https://coding.maylove.pub/2021/eab0079965df/</id>
    <published>2021-11-13T14:53:04.000Z</published>
    <updated>2021-11-13T14:54:04.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h4><ul><li>进程就是程序执行的载体</li></ul><h4 id="进程在生活中的应用"><a href="#进程在生活中的应用" class="headerlink" title="进程在生活中的应用"></a>进程在生活中的应用</h4><ul><li>我们打开的每个<code>软件 游戏,</code>执行的<code>每一个python脚本</code>都是<strong>启动一个进程</strong></li><li>软件(游戏, 脚本) == 进程</li></ul><h4 id="进程的口粮"><a href="#进程的口粮" class="headerlink" title="进程的口粮"></a>进程的口粮</h4><ul><li>每一个进程像人一样需要吃饭,他的粮食就是:内存和cpu</li></ul><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><ul><li>主进程创建子进程</li><li>父进程创建子进程</li></ul><h4 id="多进程的执行方式"><a href="#多进程的执行方式" class="headerlink" title="多进程的执行方式"></a>多进程的执行方式</h4><ul><li>cpu分配空余核心给进程</li></ul>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;进程的基础知识</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="进程与线程" scheme="https://coding.maylove.pub/tags/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(二十三)</title>
    <link href="https://coding.maylove.pub/2021/66e0909bf3d4/"/>
    <id>https://coding.maylove.pub/2021/66e0909bf3d4/</id>
    <published>2021-11-11T18:10:13.000Z</published>
    <updated>2021-11-11T18:47:53.791Z</updated>
    
    <content type="html"><![CDATA[<p>作业案例1</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/1.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   学生信息库</span></span><br><span class="line"><span class="string">   1: 将学生信息存入一个json文件中， 添加读与写json的函数</span></span><br><span class="line"><span class="string">   2: 我们要将用户添加修改和删除的行为记录到日志中，添加与修改都用info代表</span></span><br><span class="line"><span class="string">      而delete将要用warn警告来提示</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotArgError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MissPathError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormatError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentInfo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, students_path, log_path</span>):</span></span><br><span class="line">        self.students_path = students_path</span><br><span class="line">        self.log_path = log_path</span><br><span class="line">        self.log = self.__log()</span><br><span class="line"></span><br><span class="line">        self.__init_path()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__log</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(self.log_path):</span><br><span class="line">            mode = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mode = <span class="string">&#x27;w&#x27;</span></span><br><span class="line">        logging.basicConfig(</span><br><span class="line">            level=logging.DEBUG,</span><br><span class="line">            <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s-%(filename)s-%(lineno)d-%(levelname)s-%(message)s&#x27;</span>,</span><br><span class="line">            filename=self.log_path,</span><br><span class="line">            filemode=mode</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> logging</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.students_path):</span><br><span class="line">            <span class="keyword">raise</span> MissPathError(<span class="string">&#x27;没有相关的地址文件 %s&#x27;</span> % self.students_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(self.students_path):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;当前的studentspath不是一个文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.students_path.endswith(<span class="string">&#x27;.json&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> FormatError(<span class="string">&#x27;当前不是一个json文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.students_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = f.read()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line">        self.students = json.loads(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.students_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json_data = json.dumps(self.students)</span><br><span class="line">            f.write(json_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_by_id</span>(<span class="params">self, student_id</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.students.get(student_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_students</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> id_, value <span class="keyword">in</span> self.students.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;学号：&#123;&#125;, 姓名:&#123;&#125;, 年龄:&#123;&#125;, 性别:&#123;&#125;, 班级:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                id_, value[<span class="string">&#x27;name&#x27;</span>], value[<span class="string">&#x27;age&#x27;</span>], value[<span class="string">&#x27;sex&#x27;</span>], value[<span class="string">&#x27;class_number&#x27;</span>]</span><br><span class="line">            ))</span><br><span class="line">        <span class="keyword">return</span> self.students</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, **student</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.check_user_info(**student)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        self.__add(**student)</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adds</span>(<span class="params">self, new_students</span>):</span></span><br><span class="line">        <span class="keyword">for</span> student <span class="keyword">in</span> new_students:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.check_user_info(**student)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e, student.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.__add(**student)</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add</span>(<span class="params">self, **student</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.students) == <span class="number">0</span>:</span><br><span class="line">            new_id = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            keys = <span class="built_in">list</span>(self.students.keys())</span><br><span class="line">            _keys = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> keys:</span><br><span class="line">                _keys.append(<span class="built_in">int</span>(item))</span><br><span class="line">            new_id = <span class="built_in">max</span>(_keys) + <span class="number">1</span></span><br><span class="line">        self.students[new_id] = student</span><br><span class="line">        self.log.info(<span class="string">&#x27;学生%s被注册了&#x27;</span> % student[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, student_id</span>):</span></span><br><span class="line">        <span class="keyword">if</span> student_id <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 并不存在&#x27;</span>.<span class="built_in">format</span>(student_id))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_info = self.students.pop(student_id)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;学号是&#123;&#125;, &#123;&#125;同学的信息已经被删除了&#x27;</span>.<span class="built_in">format</span>(student_id, user_info[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line">            self.log.warning(<span class="string">&#x27;学号是&#123;&#125;, &#123;&#125;同学的信息已经被删除了&#x27;</span>.<span class="built_in">format</span>(student_id, user_info[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deletes</span>(<span class="params">self, ids</span>):</span></span><br><span class="line">        <span class="keyword">for</span> id_ <span class="keyword">in</span> ids:</span><br><span class="line">            <span class="keyword">if</span> id_ <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;id_&#125;</span> 不存在学生库中&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            student_info = self.students.pop(id_)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;学号<span class="subst">&#123;id_&#125;</span> 学生<span class="subst">&#123;student_info[<span class="string">&quot;name&quot;</span>]&#125;</span> 已被移除&#x27;</span>)</span><br><span class="line">            self.log.warning(<span class="string">f&#x27;学号<span class="subst">&#123;id_&#125;</span> 学生<span class="subst">&#123;student_info[<span class="string">&quot;name&quot;</span>]&#125;</span> 已被移除&#x27;</span>)</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, student_id, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> student_id <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;并不存在这个学号:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(student_id))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.check_user_info(**kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">        self.students[student_id] = kwargs</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;同学信息更新完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updates</span>(<span class="params">self, update_students</span>):</span></span><br><span class="line">        <span class="keyword">for</span> student <span class="keyword">in</span> update_students:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                id_ = <span class="built_in">list</span>(student.keys())[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> id_ <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;学号<span class="subst">&#123;id_&#125;</span> 不存在&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            user_info = student[id_]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.check_user_info(**user_info)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.students[id_] = user_info</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;所有用户信息更新完成&#x27;</span>)</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_users</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(kwargs) == <span class="number">1</span>, <span class="string">&#x27;参数数量传递错误&#x27;</span></span><br><span class="line"></span><br><span class="line">        values = <span class="built_in">list</span>(self.students.values())</span><br><span class="line">        key = <span class="literal">None</span></span><br><span class="line">        value = <span class="literal">None</span></span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;sex&#x27;</span></span><br><span class="line">            value = kwargs[<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;class_number&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;class_number&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;age&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;没有发现搜索的关键字&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> values:  <span class="comment"># [&#123;name, sex, age, class_number&#125;, &#123;&#125;]</span></span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">in</span> user[key]:</span><br><span class="line">                result.append(user)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_user_info</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(kwargs) == <span class="number">4</span>, <span class="string">&#x27;参数必须是4个&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;没有发现学生姓名参数&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;缺少学生年龄参数&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;缺少学生性别参数&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;class_number&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;缺少学生班级参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        name_value = kwargs[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># type(name_value)</span></span><br><span class="line">        age_value = kwargs[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">        sex_value = kwargs[<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">        class_number_value = kwargs[<span class="string">&#x27;class_number&#x27;</span>]</span><br><span class="line">        <span class="comment"># isinstace(对比的数据, 目标类型） isinstance(1, str)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name_value, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;name应该是字符串类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(age_value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;age 应该是整型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(sex_value, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;sex应该是字符串类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(class_number_value, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;class_number应该是字符串类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dewei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小慕&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小曼&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">4</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小高&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">5</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小云&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    student_info = StudentInfo(<span class="string">&#x27;students.json&#x27;</span>)</span><br><span class="line">    user = student_info.get_by_id(<span class="number">1</span>)</span><br><span class="line">    student_info.add(name=<span class="string">&#x27;dewei&#x27;</span>, age=<span class="number">34</span>, class_number=<span class="string">&#x27;A&#x27;</span>, sex=<span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line">    users = [</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaohong&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    student_info.adds(users)</span><br><span class="line">    student_info.get_all_students()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line">    student_info.deletes([<span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">    student_info.get_all_students()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------&#x27;</span>)</span><br><span class="line">    student_info.updates([</span><br><span class="line">        &#123;<span class="number">1</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dewei.zhang&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小慕同学&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;&#125;</span><br><span class="line">    ])</span><br><span class="line">    student_info.get_all_students()</span><br><span class="line">    result = student_info.search_users(name=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    result = student_info.search_users(name=<span class="string">&#x27;小&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line">    result = student_info.search_users(name=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    result = student_info.search_users(name=<span class="string">&#x27;小&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----&#x27;</span>)</span><br><span class="line">    result = student_info.search_users (name=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><blockquote><p>亲爱的朋友们，经过这一阶段的学习，大家已经掌握了在Python中如何进行函数的定义与调用、文件基本操作、模块化思想······，也熟悉了Python中一些基本的内置函数和方法的运用，接下来让我们动手实践下——编写“数字猜猜猜”小游戏。</p></blockquote><h5 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h5><p><em>根据现实生活中的猜数字游戏的游戏规则，运用Python语言模拟实现猜数字游戏的的基本功能，请学员们参考真实的猜数字游戏规则和如下的程序运行效果图进行代码编写，以实现“数字猜猜猜”小游戏的基本功能。游戏规则介绍如下：</em></p><p>玩家根据提示进行数字区间起始位置和终止位置的输入</p><ol><li>依据 1 中输入的数字区间，产生该区间内一个随机数，用于进行猜测比对的终值</li><li>提示用户输入所猜测的数字，与 2 中产生的随机数字进行比对，并将相应的信息写入指定的日志文件（日志文件名称：record.txt；日志文件路径：与.py文件处于同一级目录）</li><li>依据 3 中的比对结果。若两者不等，打印友好提示，重复 3、4 步骤；若两者相等，则退出该函数，执行下列语句</li><li>当猜测的值不在指定区间内时，不需要统计次数和记录</li><li>打印如效果图所示，用以提示游戏结束的信息</li></ol><h5 id="运行效果图"><a href="#运行效果图" class="headerlink" title="运行效果图:"></a>运行效果图:</h5><ol><li><p>成功运行效果图：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/2.jpg" alt="2"></p></li><li><p>输入区间起始值和区间终止值相等效果图：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/3.jpg" alt="3"></p></li><li><p>输入区间起始值大于区间终止值效果图：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/4.jpg" alt="4"></p></li><li><p>输入区间起始值和终止值为非数字字符效果图：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/5.jpg" alt="5"></p></li></ol><h5 id="代码-不想写了-包括上面那个-都不是我写的-好累-好困-去睡了-回头再看"><a href="#代码-不想写了-包括上面那个-都不是我写的-好累-好困-去睡了-回头再看" class="headerlink" title="代码(不想写了,包括上面那个..都不是我写的, 好累 好困 去睡了  回头再看)"></a>代码(不想写了,包括上面那个..都不是我写的, 好累 好困 去睡了  回头再看)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2021/8/27 21:38</span></span><br><span class="line"><span class="comment"># @Author   : InsaneLoafer</span></span><br><span class="line"><span class="comment"># @File     : mooc_test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_log</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        mode = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mode = <span class="string">&#x27;w&#x27;</span></span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(filename)s %(lineno)d %(message)s&#x27;</span>,</span><br><span class="line">        filename=path,</span><br><span class="line">        filemode=mode</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_number</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;********************欢迎进入数字踩踩踩游戏********************&#x27;</span>)</span><br><span class="line">    start = <span class="built_in">input</span>(<span class="string">&#x27;数字区间起始值：&#x27;</span>)</span><br><span class="line">    end = <span class="built_in">input</span>(<span class="string">&#x27;数字区间终止值：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> start.isdigit() <span class="keyword">or</span> <span class="keyword">not</span> end.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;您输入的区间数字为非数字字符！！请重新启动程序。&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        start = <span class="built_in">int</span>(start)</span><br><span class="line">        end = <span class="built_in">int</span>(end)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> start == end:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的区间数字相同！！请重新启动程序。&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">elif</span> start &gt; end:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的区间数字大小有误！！请重新启动程序。&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;所产生的的随机数字区间为：[&#123;&#125;, &#123;&#125;]&#x27;</span>.<span class="built_in">format</span>(start, end))</span><br><span class="line">            random_number = random.randint(start, end)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请继续输入您猜测的数字：&#x27;</span>))</span><br><span class="line">                <span class="keyword">if</span> number <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对不起您输入的数字未在指定区间内！！！&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> number &gt; random_number:</span><br><span class="line">                    init_log(<span class="string">&#x27;record.txt&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;*********&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;Higher than the anwser&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> number &lt; random_number:</span><br><span class="line">                    init_log(<span class="string">&#x27;record.txt&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;*********&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;Lower than the anwser&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> number == random_number:</span><br><span class="line">                    init_log(<span class="string">&#x27;record.txt&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;*********&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;恭喜你！只用了&#123;&#125;次就赢得了游戏&#x27;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    guess_number()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用前面所学知识&lt;br&gt;完成自己的任务。</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://coding.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(二十二)</title>
    <link href="https://coding.maylove.pub/2021/7e327a21dfc3/"/>
    <id>https://coding.maylove.pub/2021/7e327a21dfc3/</id>
    <published>2021-11-11T18:10:05.000Z</published>
    <updated>2021-11-11T18:48:07.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h3><blockquote><p>请运用reduce函数，计算20的阶乘，并于终端打印计算结果（如下）</p><p>‘2432902008176640000’</p></blockquote><h5 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h5><ol><li>定义use_reduce函数</li><li>函数体内：实现某个数值的阶乘</li></ol><h5 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h5><ol><li>结合list和range函数实现1-20(包含20）的数值即list(range(1,21))</li><li>20的阶乘为<code>1*2*3*4*5*...*20</code>(角标星星)</li></ol><h5 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从functools 中导入reduce函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_reduce</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="comment"># 使用result接收两个数的乘积</span></span><br><span class="line">    result =</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用data接收一个1-20的数值</span></span><br><span class="line">    data =</span><br><span class="line">    <span class="comment"># 调用use_reduce函数传入data</span></span><br><span class="line">    result = reduce()</span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_reduce</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 使用result接收reduce实现20的阶乘</span></span><br><span class="line">    result = reduce(<span class="keyword">lambda</span> m, n: m*n, data)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 测试该功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用data接收一个1-20的数值</span></span><br><span class="line">    data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>))</span><br><span class="line">    <span class="comment"># 调用use_reduce函数传入data</span></span><br><span class="line">    result = use_reduce(data)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用前面所学知识&lt;br&gt;完成自己的任务。</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://coding.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(二十一)</title>
    <link href="https://coding.maylove.pub/2021/c5a00c2fe360/"/>
    <id>https://coding.maylove.pub/2021/c5a00c2fe360/</id>
    <published>2021-11-11T18:09:42.000Z</published>
    <updated>2021-11-11T18:48:12.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h3><blockquote><p>使用map函数，求元组 (2,4,6,8,10,12)中各个元素的5次方</p></blockquote><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><ol><li>pow_five函数体内：计算元素的5次方</li><li>调用pow_five函数传入data，使用result接收</li></ol><h4 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h4><ol><li>pow(x,y) 方法返回 x的y次方的值</li><li>计算结果：(32, 1024, 7776, 32768, 100000, 248832)</li></ol><h4 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_five</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 计算元素的5次方</span></span><br><span class="line">    result =</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>)</span><br><span class="line">    <span class="comment"># 调用pow_five函数传入data，使用result接收</span></span><br><span class="line">    result = <span class="built_in">map</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">tuple</span>(result))</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_five</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 计算元素的5次方</span></span><br><span class="line">    result = <span class="built_in">map</span>(<span class="keyword">lambda</span> n: <span class="built_in">pow</span>(n, <span class="number">5</span>), data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">    <span class="comment"># 调用pow_five函数传入data，使用result接收</span></span><br><span class="line">    result = pow_five(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">tuple</span>(result))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用前面所学知识&lt;br&gt;完成自己的任务。</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://coding.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(二十)</title>
    <link href="https://coding.maylove.pub/2021/6f44a47c4b51/"/>
    <id>https://coding.maylove.pub/2021/6f44a47c4b51/</id>
    <published>2021-11-11T18:09:27.000Z</published>
    <updated>2021-11-11T18:48:20.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h3><blockquote><p>使用filter函数，求0-50以内（包括50）的偶数<br>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44,46, 48, 50]</p></blockquote><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><ol><li>定义use_filter函数</li><li>函数体内：实现过滤偶数值的功能</li></ol><h4 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h4><ul><li>使用变量data接收0-50（包含50）的数字，即list(range(51))</li></ul><h4 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_filter</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 使用result接收filter过滤偶数值的功能</span></span><br><span class="line">    result =</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用data接收0-50的数值</span></span><br><span class="line">    data =</span><br><span class="line">    <span class="comment"># 调用use_filter函数传入data,使用result变量接收</span></span><br><span class="line">    result =</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure><h4 id="代码提交区"><a href="#代码提交区" class="headerlink" title="代码提交区"></a>代码提交区</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_filter</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 使用result接收filter过滤偶数值的功能</span></span><br><span class="line">    result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> n:n%<span class="number">2</span> == <span class="number">0</span>,data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用data接收0-50的数值</span></span><br><span class="line">    data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">51</span>))</span><br><span class="line">    <span class="comment"># 调用use_filter函数传入data,使用result变量接收</span></span><br><span class="line">    result = use_filter(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用前面所学知识&lt;br&gt;完成自己的任务。</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://coding.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的高级函数(魔法函数)</title>
    <link href="https://coding.maylove.pub/2021/ef7d290da2cb/"/>
    <id>https://coding.maylove.pub/2021/ef7d290da2cb/</id>
    <published>2021-11-11T18:08:36.000Z</published>
    <updated>2021-11-11T18:16:34.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python中的高级函数-魔法函数"><a href="#Python中的高级函数-魔法函数" class="headerlink" title="Python中的高级函数(魔法函数)"></a>Python中的高级函数(魔法函数)</h3><ul><li>filter(内置函数)</li><li>map(内置函数)</li><li>reduce(曾经是内置函数)</li></ul><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>对循环根据过滤条件进行过滤</li></ul><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul><li><code>filter(func, list)</code></li></ul><h5 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>func</code>: 对list每个item进行条件过滤的定义</li><li><code>list</code> : 需要过滤的列表</li></ul><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul><li><code>res = filter(lambda x:x &gt; 1, [0,1,2])</code></li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ul><li><code>&lt;filter at 0x4f3af70&gt; -&gt; [1,2]</code></li></ul><hr><h4 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h4><h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><ul><li>对列表中的每个成员<code>是否满足条件</code>返回对应的<strong>True</strong>与<strong>False</strong></li></ul><h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><ul><li><code>map(func, list)</code></li></ul><h5 id="参数介绍-1"><a href="#参数介绍-1" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>func</code>: 对List每个item进行条件满足的判断</li><li><code>list</code>: 需要过滤的列表</li></ul><h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><ul><li><code>res = map(lambda x:x &gt; 1, [0,1,2])</code></li></ul><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><ul><li><code>&lt;map at 0x4f3af70&gt; -&gt; [False, False, True]</code></li></ul><hr><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a><code>reduce</code></h4><h5 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h5><ul><li>对循环前后两个数据进行累加</li></ul><h5 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h5><ul><li><code>reduce(func, list)</code></li></ul><h5 id="参数介绍-2"><a href="#参数介绍-2" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>func</code> : 对 数据累加的函数</li><li><code>list</code> : 需要处理的列表</li></ul><h5 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h5><ul><li><code>res = reduce(lambda x,y: x + y, [0,1,2])</code></li></ul><h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><ul><li>数字  <code>-&gt;</code> 3</li></ul><h5 id="reduce的导入"><a href="#reduce的导入" class="headerlink" title="reduce的导入"></a>reduce的导入</h5><ul><li><code>from functools import reduce</code></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">frunts = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="string">&#x27;e&#x27;</span> <span class="keyword">in</span> x, frunts)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="built_in">print</span>(frunts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_func</span>(<span class="params">item</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;e&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------&#x27;</span>)</span><br><span class="line">filter_result = <span class="built_in">filter</span>(filter_func, frunts)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(filter_result))</span><br><span class="line"></span><br><span class="line">map_result = <span class="built_in">map</span>(filter_func, frunts)  <span class="comment"># &gt; all</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(map_result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reduce_result = reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span>(reduce_result)</span><br><span class="line"></span><br><span class="line">reduce_result_str = reduce(<span class="keyword">lambda</span> x, y: x + y, frunts)</span><br><span class="line"><span class="built_in">print</span>(reduce_result_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;3个 Python中的高级函数(魔法函数) 分别是 filter,map,reduce</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://coding.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的迭代器</title>
    <link href="https://coding.maylove.pub/2021/d7eed8961f67/"/>
    <id>https://coding.maylove.pub/2021/d7eed8961f67/</id>
    <published>2021-11-11T18:08:16.000Z</published>
    <updated>2021-11-11T18:15:43.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python中的迭代器"><a href="#Python中的迭代器" class="headerlink" title="Python中的迭代器"></a>Python中的迭代器</h3><h4 id="什么是迭代器"><a href="#什么是迭代器" class="headerlink" title="什么是迭代器"></a>什么是迭代器</h4><ul><li>同步进行(不需要等待所有数据都写入内存即可使用)</li></ul><h4 id="如何生成迭代器-iter"><a href="#如何生成迭代器-iter" class="headerlink" title="如何生成迭代器  - iter"></a>如何生成迭代器  - <code>iter</code></h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li>生成一个迭代对象</li></ul><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul><li><code>iter(iterable)</code></li></ul><h5 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>iterable</code> :  可迭代的数据类型</li></ul><h4 id="迭代器的用法-next"><a href="#迭代器的用法-next" class="headerlink" title="迭代器的用法   -  next"></a>迭代器的用法   - <code> next</code></h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><ul><li>返回迭代器中的数据</li></ul><h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><ul><li><code>next(iterator)</code></li></ul><h5 id="参数介绍-1"><a href="#参数介绍-1" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>iterator</code>: 迭代器对象</li></ul><h4 id="迭代器常用方法之生成迭代器"><a href="#迭代器常用方法之生成迭代器" class="headerlink" title="迭代器常用方法之生成迭代器"></a>迭代器常用方法之生成迭代器</h4><ul><li><p>for循环生成法—<code>yield</code></p></li><li><p>for循环一行生成迭代器</p></li></ul><h4 id="迭代器常用方法之for循环获取"><a href="#迭代器常用方法之for循环获取" class="headerlink" title="迭代器常用方法之for循环获取"></a>迭代器常用方法之for循环获取</h4><ul><li>(i for i range(10))</li><li>用完再用不会报错.</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">iter_obj = <span class="built_in">iter</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># print(next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(next(iter_obj))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(next(iter_obj))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_next</span>(<span class="params">iter_obj</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(iter_obj)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_iter</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iter_obj = make_iter()</span><br><span class="line"><span class="comment"># print(type(iter_obj))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 执行后程序会空 , 拿不到数据</span></span><br><span class="line"></span><br><span class="line">iter_obj = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;========&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中迭代器的用法</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://coding.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python python的随机模块--random</title>
    <link href="https://coding.maylove.pub/2021/b22ca34c955f/"/>
    <id>https://coding.maylove.pub/2021/b22ca34c955f/</id>
    <published>2021-11-11T18:08:02.000Z</published>
    <updated>2021-11-11T18:14:57.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python的随机模块–random"><a href="#python的随机模块–random" class="headerlink" title="python的随机模块–random"></a>python的随机模块–<code>random</code></h3><ul><li><code>random.random</code><ul><li>模块名称.模块中的函数</li></ul></li><li><code>random.uniform</code></li><li><code>random.randint</code></li><li><code>random.choice</code></li><li><code>random.sample</code></li><li><code>random.randrange</code></li></ul><h4 id="random-random"><a href="#random-random" class="headerlink" title="random.random"></a>random.random</h4><ul><li>随机返回0~1之间的浮点数</li></ul><h4 id="random-uniform"><a href="#random-uniform" class="headerlink" title="random.uniform"></a>random.uniform</h4><ul><li>产生一个a,b区间的随机浮点数</li></ul><h4 id="random-randint"><a href="#random-randint" class="headerlink" title="random.randint"></a>random.randint</h4><ul><li>产生一个a, b区间的随机整数</li></ul><h4 id="random-choice"><a href="#random-choice" class="headerlink" title="random.choice"></a>random.choice</h4><ul><li>返回对象中的一个随机元素</li></ul><h4 id="random-sample"><a href="#random-sample" class="headerlink" title="random.sample"></a>random.sample</h4><ul><li><p>随机返回对象中指定的元素</p></li><li><p><code># 即个数</code></p></li></ul><h4 id="random-randrange"><a href="#random-randrange" class="headerlink" title="random.randrange"></a>random.randrange</h4><ul><li>获取区间内的一个随机数</li><li><code>random.randrange(0, 100, 1)</code>  # 区间,步长</li><li><code>random.choice(range(0, 100, 1))</code></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">gifts = [<span class="string">&#x27;iphone&#x27;</span>, <span class="string">&#x27;ipad&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;tv&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce_gifts</span>():</span></span><br><span class="line">    gift = random.choice(gifts)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你得到了%s&#x27;</span> % gift)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce_gift_new</span>():</span></span><br><span class="line">    count = random.randrange(<span class="number">0</span>, <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= count &lt;= <span class="number">50</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你中了一个iphone&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">50</span> &lt; count &lt;= <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你中了一个ipad&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">70</span> &lt; count &lt; <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你中了一个tv电视&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> count &gt;= <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;恭喜你中了一辆小汽车&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># chioce_gifts()</span></span><br><span class="line">    chioce_gift_new()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;python的随机模块--random</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://coding.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的内置函数总结</title>
    <link href="https://coding.maylove.pub/2021/fbe68b01bdf2/"/>
    <id>https://coding.maylove.pub/2021/fbe68b01bdf2/</id>
    <published>2021-11-11T18:07:43.000Z</published>
    <updated>2021-11-11T18:14:14.279Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python中的内置函数总结"><a href="#Python中的内置函数总结" class="headerlink" title="Python中的内置函数总结"></a>Python中的内置函数总结</h3><ul><li>总结python的常用内置函数</li></ul><h4 id="常用函数1"><a href="#常用函数1" class="headerlink" title="常用函数1"></a>常用函数1</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>返回值</th><th>举例</th></tr></thead><tbody><tr><td><code>abs</code></td><td><strong>Number</strong></td><td>返回数字绝对值</td><td>正数字</td><td><code>abs(-10)</code></td></tr><tr><td><code>all</code></td><td><strong>List</strong></td><td>判断列表内容是否全是true</td><td>Bool</td><td><code>all([&#39;&#39;, &#39;123&#39;])</code></td></tr><tr><td><code>help</code></td><td><strong>object</strong></td><td>打印对象的用法</td><td>无</td><td><code>help(list)</code></td></tr><tr><td><code>enumerate</code></td><td><strong>iterable</strong></td><td>迭代时记录索引</td><td>无</td><td><code>for index, item in enumerate(list)</code></td></tr><tr><td><code>input</code></td><td><strong>Str</strong></td><td>命令行输入消息</td><td>Str</td><td><code>input(&#39;请输入信息:&#39;)</code></td></tr></tbody></table><h4 id="常用函数2"><a href="#常用函数2" class="headerlink" title="常用函数2"></a>常用函数2</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>返回值</th><th>举例</th></tr></thead><tbody><tr><td><code>isinstance</code></td><td>Object, type</td><td>判断对象是否是某种类型</td><td>Bool</td><td><code>isinstance(&#39;a&#39;, str)</code></td></tr><tr><td><code>type</code></td><td>Object</td><td>判断对象的类型</td><td>Str</td><td><code>type(10)</code></td></tr><tr><td><code>vars</code></td><td>instance</td><td>返回实例化的字典信息</td><td>dict</td><td></td></tr><tr><td><code>dir</code></td><td>object</td><td>返回对象中所有可用方法和属性</td><td>List</td><td><code>dir(&#39;asd&#39;)</code></td></tr><tr><td><code>hasattr</code></td><td>Obj, key</td><td>判断对象中是否有某个属性</td><td>Bool</td><td><code>hasattr(&#39;1&#39;, &#39;upper&#39;)</code></td></tr></tbody></table><h4 id="常用函数3"><a href="#常用函数3" class="headerlink" title="常用函数3"></a>常用函数3</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>返回值</th><th>举例</th></tr></thead><tbody><tr><td><code>setattr</code></td><td>Obj,key,value</td><td>为实例化对象添加属性与值</td><td>无</td><td><code>setattr(instance, &#39;run&#39;, &#39;jo&#39;)</code></td></tr><tr><td><code>gatattr</code></td><td>obj, key</td><td>通过对象获取属性</td><td>任何类型</td><td><code>getattr(obj, key)</code></td></tr><tr><td><code>any</code></td><td>Iterable</td><td>判断内容是否有True值</td><td>Bool</td><td><code>any([1, 0, &#39;&#39;])</code></td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># food = input(&#x27;你想吃什么呢:&#x27;)</span></span><br><span class="line"><span class="comment"># print(food)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # help(input)</span></span><br><span class="line"><span class="comment"># help(list)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = self.a</span><br><span class="line">        self.b = self.b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"><span class="built_in">print</span>(test.a)</span><br><span class="line">result = <span class="built_in">vars</span>(test)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(test, <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(test, <span class="string">&#x27;c&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(<span class="built_in">list</span>, <span class="string">&#x27;append&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(<span class="built_in">list</span>, <span class="string">&#x27;appends&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(test, <span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(test.c)  <span class="comment"># 若存在, 会覆盖</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">vars</span>(test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># setattr((list, &#x27;c&#x27;, 1))  # 内置的类不可自定义属性</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(<span class="built_in">list</span>, <span class="string">&#x27;appends&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">getattr</span>(<span class="built_in">list</span>, <span class="string">&#x27;appends&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&#x27;&#x27;</span>, <span class="literal">None</span>, <span class="literal">True</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>(a))  <span class="comment"># &#x27;或&#x27; 的关系</span></span><br><span class="line"><span class="comment"># all - &gt; and</span></span><br><span class="line"><span class="comment"># any - &gt; or</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;很多常用的内置函数</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://coding.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的虚拟环境</title>
    <link href="https://coding.maylove.pub/2021/a3ebd6c062e7/"/>
    <id>https://coding.maylove.pub/2021/a3ebd6c062e7/</id>
    <published>2021-11-11T18:07:29.000Z</published>
    <updated>2021-11-11T18:13:05.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python中的虚拟环境"><a href="#Python中的虚拟环境" class="headerlink" title="Python中的虚拟环境"></a>Python中的虚拟环境</h3><ul><li>认识虚拟环境</li><li>Python中的虚拟环境工具</li></ul><h4 id="认识虚拟环境"><a href="#认识虚拟环境" class="headerlink" title="认识虚拟环境"></a>认识虚拟环境</h4><ul><li>各个版本互不干扰,互不相等</li><li>python可能版本不同  系统环境不同</li><li>创建的每一个项目都是各自的虚拟环境</li></ul><h4 id="Python中的虚拟环境工具"><a href="#Python中的虚拟环境工具" class="headerlink" title="Python中的虚拟环境工具"></a>Python中的虚拟环境工具</h4><ul><li><code>Virtualenv</code></li><li><code>pyenv</code></li></ul><h4 id="virtualenv-另一个较为复杂"><a href="#virtualenv-另一个较为复杂" class="headerlink" title="virtualenv(另一个较为复杂)"></a><code>virtualenv</code>(另一个较为复杂)</h4><ul><li>命令行下使用</li><li><code>pip install virtualenv</code></li><li>选择目录</li><li><code>virtualenv -p python3 penv</code></li><li><code>./penv/bin/active</code></li><li>win系统可以<code>在bin文件夹下</code>输入<code>active</code>  <code>回车</code>*<em>进入虚拟环境</em></li><li><code>deacitve</code>(退出虚拟环境)</li></ul><blockquote><p>装这个插件…….Windows配置环境配置了半个多小时(想买mac或者重开成Linux了呜呜呜)</p></blockquote>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的虚拟环境</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://coding.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的日志模块</title>
    <link href="https://coding.maylove.pub/2021/58cc3eaec3ec/"/>
    <id>https://coding.maylove.pub/2021/58cc3eaec3ec/</id>
    <published>2021-11-11T18:07:17.000Z</published>
    <updated>2021-11-11T18:12:29.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python中的日志模块"><a href="#Python中的日志模块" class="headerlink" title="Python中的日志模块"></a>Python中的日志模块</h3><h4 id="日志的作用"><a href="#日志的作用" class="headerlink" title="日志的作用"></a>日志的作用</h4><ul><li>日记</li><li>程序行为</li><li>重要信息记录</li></ul><h4 id="日志的等级"><a href="#日志的等级" class="headerlink" title="日志的等级"></a>日志的等级</h4><ul><li><code>debug</code></li><li><code>info</code></li><li><code>warning</code></li><li><code>error</code></li><li><code>critical</code></li></ul><h4 id="logging模块的使用"><a href="#logging模块的使用" class="headerlink" title="logging模块的使用"></a>logging模块的使用</h4><ul><li><code>logging.basicConfig</code></li></ul><table><thead><tr><th>参数名</th><th>作用</th><th>举例</th></tr></thead><tbody><tr><td><code>level</code></td><td>日志输出等级</td><td><code>level = logging.DEBUG</code></td></tr><tr><td><code>format</code></td><td>日志输出格式</td><td></td></tr><tr><td><code>filename</code></td><td>存储位置</td><td><code>filename = &#39;d://back.log&#39;</code></td></tr><tr><td><code>filemode</code></td><td>输入模式</td><td><code>filemode = &quot;w&quot;</code></td></tr></tbody></table><h5 id="format具体格式"><a href="#format具体格式" class="headerlink" title="format具体格式"></a>format具体格式</h5><table><thead><tr><th>格式符</th><th>含义</th></tr></thead><tbody><tr><td><code>%(levelname)s</code></td><td>日志级别名称</td></tr><tr><td><code>%(pathname)s</code></td><td>执行程序的路径</td></tr><tr><td><code>%(filename)s</code></td><td>执行程序名</td></tr><tr><td><code>%(lineno)d</code></td><td>日志的当前行号</td></tr><tr><td><code>%(asctime)s</code></td><td>打印日志的时间</td></tr><tr><td><code>%(message)s</code></td><td>日志信息</td></tr></tbody></table><ul><li><code>format = &#39;%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s&#39;</code></li><li>(常用的格式)</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_log</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        mode = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mode = <span class="string">&#x27;w&#x27;</span></span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(filename)s %(lineno)d %(levelname)s %(message)s&#x27;</span>,</span><br><span class="line">        filename=path,</span><br><span class="line">        filemode=mode</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">path = os.path.join(current_path, <span class="string">&#x27;back.log&#x27;</span>)</span><br><span class="line">log = init_log(path)</span><br><span class="line"><span class="comment"># log = init_log()</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;这是第一个记录的日志信息&#x27;</span>)</span><br><span class="line">log.warning(<span class="string">&#x27;这是一个警告&#x27;</span>)</span><br><span class="line">log.error(<span class="string">&#x27;这是一个重大的错误信息&#x27;</span>)</span><br><span class="line">log.debug(<span class="string">&#x27;这是一个debug&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的日志模块</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://coding.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的加密工具</title>
    <link href="https://coding.maylove.pub/2021/6bf1514df252/"/>
    <id>https://coding.maylove.pub/2021/6bf1514df252/</id>
    <published>2021-11-11T18:07:00.000Z</published>
    <updated>2021-11-11T18:11:43.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python中的加密工具"><a href="#Python中的加密工具" class="headerlink" title="Python中的加密工具"></a>Python中的加密工具</h3><h4 id="hashlib模块介绍"><a href="#hashlib模块介绍" class="headerlink" title="hashlib模块介绍"></a>hashlib模块介绍</h4><ul><li>难破解</li><li>不可逆</li></ul><h4 id="hashlib模块中的常用方法"><a href="#hashlib模块中的常用方法" class="headerlink" title="hashlib模块中的常用方法"></a>hashlib模块中的常用方法</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>md5</code></td><td>byte</td><td>Md5算法加密</td><td><code>hashlib.md5(b&#39;hello&#39;)</code></td><td>Hash对象</td></tr><tr><td><code>sha1</code></td><td>byte</td><td>Sha1算法加密</td><td><code>hashlib.sha1(b&#39;hello&#39;)</code></td><td>Hash对象</td></tr><tr><td><code>sha256</code></td><td>byte</td><td>Sha256算法加密</td><td><code>hashlib.sha256(b&#39;hello&#39;)</code></td><td>Hash对象</td></tr><tr><td><code>sha512</code></td><td>byte</td><td>Sha512算法加密</td><td><code>hashlib.sha512(b&#39;hello&#39;)</code></td><td>Hash对象</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">base_sigh = <span class="string">&#x27;muke&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom</span>():</span></span><br><span class="line">    a_timestamp = <span class="built_in">int</span>(time.time())</span><br><span class="line">    _token = <span class="string">&#x27;%s%s&#x27;</span> % (base_sigh, a_timestamp)</span><br><span class="line">    <span class="comment"># print(_token, type(_token))</span></span><br><span class="line">    hashobj = hashlib.sha1(_token.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    a_token = hashobj.hexdigest()</span><br><span class="line">    <span class="comment"># print(a_token)</span></span><br><span class="line">    <span class="keyword">return</span> a_token, a_timestamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b_service_check</span>(<span class="params">token, timestamp</span>):</span></span><br><span class="line">    _token = <span class="string">&#x27;%s%s&#x27;</span> % (base_sigh, timestamp)</span><br><span class="line">    b_token = hashlib.sha1(_token.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> token == b_token:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    need_help_token, timestamp = custom()  <span class="comment"># 若只使用一个变量,则此处会生成一个元组传入其变量</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    result = b_service_check(need_help_token, <span class="built_in">int</span>(time.time()))</span><br><span class="line">    <span class="keyword">if</span> result == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;a合法,b服务可以进行帮助&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;a不合法,b不可进行帮助&#x27;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h4 id="base64模块介绍"><a href="#base64模块介绍" class="headerlink" title="base64模块介绍"></a>base64模块介绍</h4><ul><li>通用型</li><li>可解密</li></ul><h4 id="base64模块的常用方法"><a href="#base64模块的常用方法" class="headerlink" title="base64模块的常用方法"></a>base64模块的常用方法</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>encodestring</code></td><td>Byte</td><td>进行base64加密</td><td><code>base64.encodestring(b&#39;py&#39;)</code></td><td>Byte</td></tr><tr><td><code>decodingstring</code></td><td>Byte</td><td>对base64解密</td><td><code>base64.decodestring(b&#39;eGlhb211\n&#39;)</code></td><td>Byte</td></tr><tr><td><code>encodebytes</code>(推荐)</td><td>Byte</td><td>进行bese64加密</td><td><code>base64.encodebytes(b&#39;py&#39;)</code></td><td>Byte</td></tr><tr><td><code>decodingbytes</code>(推荐)</td><td>Byte</td><td>对base64解密</td><td><code>base64.decodebytes(b&#39;eGlhb211\n&#39;)</code></td><td>Byte</td></tr></tbody></table><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">replace_one = <span class="string">&#x27;%&#x27;</span></span><br><span class="line">replace_two = <span class="string">&#x27;$&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">        data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(data, <span class="built_in">bytes</span>):</span><br><span class="line">        data = data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;data need bytes or str&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    _data = base64.encodebytes(data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(_data)</span></span><br><span class="line">    _data = _data.replace(<span class="string">&#x27;a&#x27;</span>, replace_one).replace(<span class="string">&#x27;2&#x27;</span>, replace_two)</span><br><span class="line">    <span class="comment"># print(_data)</span></span><br><span class="line">    <span class="keyword">return</span> _data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data, <span class="built_in">bytes</span>):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;data need bytes&#x27;</span>)</span><br><span class="line">    replace_one_b = replace_one.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    replace_two_b = replace_two.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = data.replace(replace_one_b, <span class="string">b&#x27;a&#x27;</span>).replace(replace_two_b, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> base64.decodebytes(data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = encode(<span class="string">&#x27;hello xiaomu&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    new_result = decode(result.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(new_result)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的几种加密工具</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://coding.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://coding.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Yaml文件的读取</title>
    <link href="https://coding.maylove.pub/2021/46d82974b24c/"/>
    <id>https://coding.maylove.pub/2021/46d82974b24c/</id>
    <published>2021-11-09T17:21:26.000Z</published>
    <updated>2021-11-09T17:44:03.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Yaml文件的读取"><a href="#Yaml文件的读取" class="headerlink" title="Yaml文件的读取"></a>Yaml文件的读取</h3><h4 id="yaml格式的介绍"><a href="#yaml格式的介绍" class="headerlink" title="yaml格式的介绍"></a>yaml格式的介绍</h4><ul><li><p>文本文件</p></li><li><p>服务器配置文件</p></li><li><p><code>xxx.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span></span><br><span class="line">  <span class="string">xiaomu</span></span><br><span class="line"><span class="attr">age:</span></span><br><span class="line">  <span class="number">10</span></span><br><span class="line"><span class="attr">xingqing:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">haha</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">heihei</span></span><br><span class="line"><span class="attr">new:</span></span><br><span class="line">  <span class="attr">a:</span> <span class="string">b</span></span><br><span class="line">  <span class="attr">c:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Python的第三方包—-pyyaml"><a href="#Python的第三方包—-pyyaml" class="headerlink" title="Python的第三方包—-pyyaml"></a>Python的第三方包—-pyyaml</h4><ul><li><code>pip install pyyaml</code></li><li><code>import yaml</code></li></ul><h4 id="读取yaml文件的方法"><a href="#读取yaml文件的方法" class="headerlink" title="读取yaml文件的方法"></a>读取yaml文件的方法</h4><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ol><li> <code>f = open(yaml_file, &#39;r&#39;)</code></li><li> <code>data = yaml.load(f.read())</code></li><li> <code>  f.close()</code></li></ol><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ul><li>字典类型</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    _result = yaml.load(data, Loader=yaml.FullLoader)</span><br><span class="line">    <span class="keyword">return</span> _result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = read(<span class="string">&#x27;muke.yaml&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result, <span class="built_in">type</span>(result))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(yaml))</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Yaml文件的基本用法</summary>
    
    
    
    <category term="Python" scheme="https://coding.maylove.pub/categories/Python/"/>
    
    
    <category term="文件操作（IO）" scheme="https://coding.maylove.pub/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88IO%EF%BC%89/"/>
    
  </entry>
  
</feed>
