<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZkeqのCoding日志</title>
  
  <subtitle>Python Java Html 都在学</subtitle>
  <link href="https://code.maylove.pub/atom.xml" rel="self"/>
  
  <link href="https://code.maylove.pub/"/>
  <updated>2021-11-13T14:54:38.649Z</updated>
  <id>https://code.maylove.pub/</id>
  
  <author>
    <name>Zkeq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 线程</title>
    <link href="https://code.maylove.pub/2021/fcde66a536a1/"/>
    <id>https://code.maylove.pub/2021/fcde66a536a1/</id>
    <published>2021-11-13T14:53:13.000Z</published>
    <updated>2021-11-13T14:54:38.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><p>Python学累了,想学Java html js vue Tailwindcss 小程序  c4d ae pr 了.</p></blockquote><h4 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h4><ul><li>进程吸收资源</li><li>传递给线程执行业务逻辑</li></ul><h4 id="线程与进程的关系"><a href="#线程与进程的关系" class="headerlink" title="线程与进程的关系"></a>线程与进程的关系</h4><ul><li>吃饭获得能量和营养(进程), 之后大脑执行逻辑(线程)</li><li>进程提供线程执行程序的前置要求,线程在重组的资源配备下,去执行程序</li></ul><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><ul><li>开启一个浏览器后,从浏览器(主进程)中创建出多个线程来开启多个页面</li></ul><h4 id="多线程的执行方式"><a href="#多线程的执行方式" class="headerlink" title="多线程的执行方式"></a>多线程的执行方式</h4><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-13/1.jpg" alt="1"></p><blockquote><h5 id="一、什么是线程"><a href="#一、什么是线程" class="headerlink" title="一、什么是线程"></a>一、什么是线程</h5><p>线程（Thread）是操作系统最小的执行单元，进程至少由一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。有些进程还不止同时干一件事，比如微信，它可以同时进行语音、发文字、浏览信息等事情。</p><p>简单理解：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程。</p><h5 id="二、怎样的任务算一个线程"><a href="#二、怎样的任务算一个线程" class="headerlink" title="二、怎样的任务算一个线程"></a>二、怎样的任务算一个线程</h5><p>进程被运行后算是一个线程，进程是不运行的，线程才会运行，而一个进程有多个线程就涉及到进程有多少可以被cpu单独调用的模块，这个调用的模块可以通过手动创建线程来建立。</p><h5 id="三、在python中如何创建线程"><a href="#三、在python中如何创建线程" class="headerlink" title="三、在python中如何创建线程"></a>三、在python中如何创建线程</h5><ul><li><p>使用的模块：<code>threading</code></p></li><li><p>创建的方法：<code>threading.Thread(…)</code></p></li></ul><p>代码如下：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-13/2.jpg" alt="2"></p></blockquote>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;线程的基础知识</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="进程与线程" scheme="https://code.maylove.pub/tags/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 进程</title>
    <link href="https://code.maylove.pub/2021/eab0079965df/"/>
    <id>https://code.maylove.pub/2021/eab0079965df/</id>
    <published>2021-11-13T14:53:04.000Z</published>
    <updated>2021-11-13T14:54:04.541Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h4><ul><li>进程就是程序执行的载体</li></ul><h4 id="进程在生活中的应用"><a href="#进程在生活中的应用" class="headerlink" title="进程在生活中的应用"></a>进程在生活中的应用</h4><ul><li>我们打开的每个<code>软件 游戏,</code>执行的<code>每一个python脚本</code>都是<strong>启动一个进程</strong></li><li>软件(游戏, 脚本) == 进程</li></ul><h4 id="进程的口粮"><a href="#进程的口粮" class="headerlink" title="进程的口粮"></a>进程的口粮</h4><ul><li>每一个进程像人一样需要吃饭,他的粮食就是:内存和cpu</li></ul><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><ul><li>主进程创建子进程</li><li>父进程创建子进程</li></ul><h4 id="多进程的执行方式"><a href="#多进程的执行方式" class="headerlink" title="多进程的执行方式"></a>多进程的执行方式</h4><ul><li>cpu分配空余核心给进程</li></ul>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;进程的基础知识</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="进程与线程" scheme="https://code.maylove.pub/tags/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(二十三)</title>
    <link href="https://code.maylove.pub/2021/66e0909bf3d4/"/>
    <id>https://code.maylove.pub/2021/66e0909bf3d4/</id>
    <published>2021-11-11T18:10:13.000Z</published>
    <updated>2021-11-11T18:47:53.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>作业案例1</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/1.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   学生信息库</span></span><br><span class="line"><span class="string">   1: 将学生信息存入一个json文件中， 添加读与写json的函数</span></span><br><span class="line"><span class="string">   2: 我们要将用户添加修改和删除的行为记录到日志中，添加与修改都用info代表</span></span><br><span class="line"><span class="string">      而delete将要用warn警告来提示</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotArgError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MissPathError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormatError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentInfo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, students_path, log_path</span>):</span></span><br><span class="line">        self.students_path = students_path</span><br><span class="line">        self.log_path = log_path</span><br><span class="line">        self.log = self.__log()</span><br><span class="line"></span><br><span class="line">        self.__init_path()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__log</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(self.log_path):</span><br><span class="line">            mode = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mode = <span class="string">&#x27;w&#x27;</span></span><br><span class="line">        logging.basicConfig(</span><br><span class="line">            level=logging.DEBUG,</span><br><span class="line">            <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s-%(filename)s-%(lineno)d-%(levelname)s-%(message)s&#x27;</span>,</span><br><span class="line">            filename=self.log_path,</span><br><span class="line">            filemode=mode</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> logging</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.students_path):</span><br><span class="line">            <span class="keyword">raise</span> MissPathError(<span class="string">&#x27;没有相关的地址文件 %s&#x27;</span> % self.students_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(self.students_path):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;当前的studentspath不是一个文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.students_path.endswith(<span class="string">&#x27;.json&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> FormatError(<span class="string">&#x27;当前不是一个json文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.students_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = f.read()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line">        self.students = json.loads(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.students_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json_data = json.dumps(self.students)</span><br><span class="line">            f.write(json_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_by_id</span>(<span class="params">self, student_id</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.students.get(student_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_students</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> id_, value <span class="keyword">in</span> self.students.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;学号：&#123;&#125;, 姓名:&#123;&#125;, 年龄:&#123;&#125;, 性别:&#123;&#125;, 班级:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                id_, value[<span class="string">&#x27;name&#x27;</span>], value[<span class="string">&#x27;age&#x27;</span>], value[<span class="string">&#x27;sex&#x27;</span>], value[<span class="string">&#x27;class_number&#x27;</span>]</span><br><span class="line">            ))</span><br><span class="line">        <span class="keyword">return</span> self.students</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, **student</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.check_user_info(**student)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">        self.__add(**student)</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adds</span>(<span class="params">self, new_students</span>):</span></span><br><span class="line">        <span class="keyword">for</span> student <span class="keyword">in</span> new_students:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.check_user_info(**student)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e, student.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.__add(**student)</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add</span>(<span class="params">self, **student</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.students) == <span class="number">0</span>:</span><br><span class="line">            new_id = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            keys = <span class="built_in">list</span>(self.students.keys())</span><br><span class="line">            _keys = []</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> keys:</span><br><span class="line">                _keys.append(<span class="built_in">int</span>(item))</span><br><span class="line">            new_id = <span class="built_in">max</span>(_keys) + <span class="number">1</span></span><br><span class="line">        self.students[new_id] = student</span><br><span class="line">        self.log.info(<span class="string">&#x27;学生%s被注册了&#x27;</span> % student[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, student_id</span>):</span></span><br><span class="line">        <span class="keyword">if</span> student_id <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 并不存在&#x27;</span>.<span class="built_in">format</span>(student_id))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_info = self.students.pop(student_id)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;学号是&#123;&#125;, &#123;&#125;同学的信息已经被删除了&#x27;</span>.<span class="built_in">format</span>(student_id, user_info[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line">            self.log.warning(<span class="string">&#x27;学号是&#123;&#125;, &#123;&#125;同学的信息已经被删除了&#x27;</span>.<span class="built_in">format</span>(student_id, user_info[<span class="string">&#x27;name&#x27;</span>]))</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deletes</span>(<span class="params">self, ids</span>):</span></span><br><span class="line">        <span class="keyword">for</span> id_ <span class="keyword">in</span> ids:</span><br><span class="line">            <span class="keyword">if</span> id_ <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;id_&#125;</span> 不存在学生库中&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            student_info = self.students.pop(id_)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;学号<span class="subst">&#123;id_&#125;</span> 学生<span class="subst">&#123;student_info[<span class="string">&quot;name&quot;</span>]&#125;</span> 已被移除&#x27;</span>)</span><br><span class="line">            self.log.warning(<span class="string">f&#x27;学号<span class="subst">&#123;id_&#125;</span> 学生<span class="subst">&#123;student_info[<span class="string">&quot;name&quot;</span>]&#125;</span> 已被移除&#x27;</span>)</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, student_id, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> student_id <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;并不存在这个学号:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(student_id))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.check_user_info(**kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">        self.students[student_id] = kwargs</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;同学信息更新完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updates</span>(<span class="params">self, update_students</span>):</span></span><br><span class="line">        <span class="keyword">for</span> student <span class="keyword">in</span> update_students:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                id_ = <span class="built_in">list</span>(student.keys())[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> id_ <span class="keyword">not</span> <span class="keyword">in</span> self.students:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;学号<span class="subst">&#123;id_&#125;</span> 不存在&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            user_info = student[id_]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.check_user_info(**user_info)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.students[id_] = user_info</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;所有用户信息更新完成&#x27;</span>)</span><br><span class="line">        self.__save()</span><br><span class="line">        self.__read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_users</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(kwargs) == <span class="number">1</span>, <span class="string">&#x27;参数数量传递错误&#x27;</span></span><br><span class="line"></span><br><span class="line">        values = <span class="built_in">list</span>(self.students.values())</span><br><span class="line">        key = <span class="literal">None</span></span><br><span class="line">        value = <span class="literal">None</span></span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;sex&#x27;</span></span><br><span class="line">            value = kwargs[<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;class_number&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;class_number&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            key = <span class="string">&#x27;age&#x27;</span></span><br><span class="line">            value = kwargs[key]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;没有发现搜索的关键字&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> values:  <span class="comment"># [&#123;name, sex, age, class_number&#125;, &#123;&#125;]</span></span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">in</span> user[key]:</span><br><span class="line">                result.append(user)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_user_info</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(kwargs) == <span class="number">4</span>, <span class="string">&#x27;参数必须是4个&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;没有发现学生姓名参数&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;缺少学生年龄参数&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;sex&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;缺少学生性别参数&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;class_number&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="keyword">raise</span> NotArgError(<span class="string">&#x27;缺少学生班级参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        name_value = kwargs[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># type(name_value)</span></span><br><span class="line">        age_value = kwargs[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">        sex_value = kwargs[<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">        class_number_value = kwargs[<span class="string">&#x27;class_number&#x27;</span>]</span><br><span class="line">        <span class="comment"># isinstace(对比的数据, 目标类型） isinstance(1, str)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name_value, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;name应该是字符串类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(age_value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;age 应该是整型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(sex_value, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;sex应该是字符串类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(class_number_value, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;class_number应该是字符串类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dewei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">33</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小慕&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小曼&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">4</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小高&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">5</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小云&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    student_info = StudentInfo(<span class="string">&#x27;students.json&#x27;</span>)</span><br><span class="line">    user = student_info.get_by_id(<span class="number">1</span>)</span><br><span class="line">    student_info.add(name=<span class="string">&#x27;dewei&#x27;</span>, age=<span class="number">34</span>, class_number=<span class="string">&#x27;A&#x27;</span>, sex=<span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line">    users = [</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaohong&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;girl&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    student_info.adds(users)</span><br><span class="line">    student_info.get_all_students()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line">    student_info.deletes([<span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">    student_info.get_all_students()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------&#x27;</span>)</span><br><span class="line">    student_info.updates([</span><br><span class="line">        &#123;<span class="number">1</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dewei.zhang&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小慕同学&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;class_number&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;boy&#x27;</span>&#125;&#125;</span><br><span class="line">    ])</span><br><span class="line">    student_info.get_all_students()</span><br><span class="line">    result = student_info.search_users(name=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    result = student_info.search_users(name=<span class="string">&#x27;小&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line">    result = student_info.search_users(name=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    result = student_info.search_users(name=<span class="string">&#x27;小&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----&#x27;</span>)</span><br><span class="line">    result = student_info.search_users (name=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><blockquote><p>亲爱的朋友们，经过这一阶段的学习，大家已经掌握了在Python中如何进行函数的定义与调用、文件基本操作、模块化思想······，也熟悉了Python中一些基本的内置函数和方法的运用，接下来让我们动手实践下——编写“数字猜猜猜”小游戏。</p></blockquote><h5 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h5><p><em>根据现实生活中的猜数字游戏的游戏规则，运用Python语言模拟实现猜数字游戏的的基本功能，请学员们参考真实的猜数字游戏规则和如下的程序运行效果图进行代码编写，以实现“数字猜猜猜”小游戏的基本功能。游戏规则介绍如下：</em></p><p>玩家根据提示进行数字区间起始位置和终止位置的输入</p><ol><li>依据 1 中输入的数字区间，产生该区间内一个随机数，用于进行猜测比对的终值</li><li>提示用户输入所猜测的数字，与 2 中产生的随机数字进行比对，并将相应的信息写入指定的日志文件（日志文件名称：record.txt；日志文件路径：与.py文件处于同一级目录）</li><li>依据 3 中的比对结果。若两者不等，打印友好提示，重复 3、4 步骤；若两者相等，则退出该函数，执行下列语句</li><li>当猜测的值不在指定区间内时，不需要统计次数和记录</li><li>打印如效果图所示，用以提示游戏结束的信息</li></ol><h5 id="运行效果图"><a href="#运行效果图" class="headerlink" title="运行效果图:"></a>运行效果图:</h5><ol><li><p>成功运行效果图：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/2.jpg" alt="2"></p></li><li><p>输入区间起始值和区间终止值相等效果图：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/3.jpg" alt="3"></p></li><li><p>输入区间起始值大于区间终止值效果图：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/4.jpg" alt="4"></p></li><li><p>输入区间起始值和终止值为非数字字符效果图：</p><p><img src="https://learnonly-7.oss-cn-qingdao.aliyuncs.com/2021-11-11/5.jpg" alt="5"></p></li></ol><h5 id="代码-不想写了-包括上面那个-都不是我写的-好累-好困-去睡了-回头再看"><a href="#代码-不想写了-包括上面那个-都不是我写的-好累-好困-去睡了-回头再看" class="headerlink" title="代码(不想写了,包括上面那个..都不是我写的, 好累 好困 去睡了  回头再看)"></a>代码(不想写了,包括上面那个..都不是我写的, 好累 好困 去睡了  回头再看)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2021/8/27 21:38</span></span><br><span class="line"><span class="comment"># @Author   : InsaneLoafer</span></span><br><span class="line"><span class="comment"># @File     : mooc_test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_log</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        mode = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mode = <span class="string">&#x27;w&#x27;</span></span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(filename)s %(lineno)d %(message)s&#x27;</span>,</span><br><span class="line">        filename=path,</span><br><span class="line">        filemode=mode</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_number</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;********************欢迎进入数字踩踩踩游戏********************&#x27;</span>)</span><br><span class="line">    start = <span class="built_in">input</span>(<span class="string">&#x27;数字区间起始值：&#x27;</span>)</span><br><span class="line">    end = <span class="built_in">input</span>(<span class="string">&#x27;数字区间终止值：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> start.isdigit() <span class="keyword">or</span> <span class="keyword">not</span> end.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;您输入的区间数字为非数字字符！！请重新启动程序。&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        start = <span class="built_in">int</span>(start)</span><br><span class="line">        end = <span class="built_in">int</span>(end)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> start == end:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的区间数字相同！！请重新启动程序。&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">elif</span> start &gt; end:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的区间数字大小有误！！请重新启动程序。&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;所产生的的随机数字区间为：[&#123;&#125;, &#123;&#125;]&#x27;</span>.<span class="built_in">format</span>(start, end))</span><br><span class="line">            random_number = random.randint(start, end)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请继续输入您猜测的数字：&#x27;</span>))</span><br><span class="line">                <span class="keyword">if</span> number <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对不起您输入的数字未在指定区间内！！！&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> number &gt; random_number:</span><br><span class="line">                    init_log(<span class="string">&#x27;record.txt&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;*********&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;Higher than the anwser&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> number &lt; random_number:</span><br><span class="line">                    init_log(<span class="string">&#x27;record.txt&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;*********&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;Lower than the anwser&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> number == random_number:</span><br><span class="line">                    init_log(<span class="string">&#x27;record.txt&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;*********&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;恭喜你！只用了&#123;&#125;次就赢得了游戏&#x27;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    guess_number()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用前面所学知识&lt;br&gt;完成自己的任务。</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://code.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(二十二)</title>
    <link href="https://code.maylove.pub/2021/7e327a21dfc3/"/>
    <id>https://code.maylove.pub/2021/7e327a21dfc3/</id>
    <published>2021-11-11T18:10:05.000Z</published>
    <updated>2021-11-11T18:48:07.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h3><blockquote><p>请运用reduce函数，计算20的阶乘，并于终端打印计算结果（如下）</p><p>‘2432902008176640000’</p></blockquote><h5 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h5><ol><li>定义use_reduce函数</li><li>函数体内：实现某个数值的阶乘</li></ol><h5 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h5><ol><li>结合list和range函数实现1-20(包含20）的数值即list(range(1,21))</li><li>20的阶乘为<code>1*2*3*4*5*...*20</code>(角标星星)</li></ol><h5 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从functools 中导入reduce函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_reduce</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="comment"># 使用result接收两个数的乘积</span></span><br><span class="line">    result =</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用data接收一个1-20的数值</span></span><br><span class="line">    data =</span><br><span class="line">    <span class="comment"># 调用use_reduce函数传入data</span></span><br><span class="line">    result = reduce()</span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_reduce</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 使用result接收reduce实现20的阶乘</span></span><br><span class="line">    result = reduce(<span class="keyword">lambda</span> m, n: m*n, data)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 测试该功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用data接收一个1-20的数值</span></span><br><span class="line">    data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>))</span><br><span class="line">    <span class="comment"># 调用use_reduce函数传入data</span></span><br><span class="line">    result = use_reduce(data)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用前面所学知识&lt;br&gt;完成自己的任务。</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://code.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(二十一)</title>
    <link href="https://code.maylove.pub/2021/c5a00c2fe360/"/>
    <id>https://code.maylove.pub/2021/c5a00c2fe360/</id>
    <published>2021-11-11T18:09:42.000Z</published>
    <updated>2021-11-11T18:48:12.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h3><blockquote><p>使用map函数，求元组 (2,4,6,8,10,12)中各个元素的5次方</p></blockquote><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><ol><li>pow_five函数体内：计算元素的5次方</li><li>调用pow_five函数传入data，使用result接收</li></ol><h4 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h4><ol><li>pow(x,y) 方法返回 x的y次方的值</li><li>计算结果：(32, 1024, 7776, 32768, 100000, 248832)</li></ol><h4 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_five</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 计算元素的5次方</span></span><br><span class="line">    result =</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>)</span><br><span class="line">    <span class="comment"># 调用pow_five函数传入data，使用result接收</span></span><br><span class="line">    result = <span class="built_in">map</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">tuple</span>(result))</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_five</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 计算元素的5次方</span></span><br><span class="line">    result = <span class="built_in">map</span>(<span class="keyword">lambda</span> n: <span class="built_in">pow</span>(n, <span class="number">5</span>), data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line">    <span class="comment"># 调用pow_five函数传入data，使用result接收</span></span><br><span class="line">    result = pow_five(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">tuple</span>(result))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用前面所学知识&lt;br&gt;完成自己的任务。</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://code.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 阶段编程练习(二十)</title>
    <link href="https://code.maylove.pub/2021/6f44a47c4b51/"/>
    <id>https://code.maylove.pub/2021/6f44a47c4b51/</id>
    <published>2021-11-11T18:09:27.000Z</published>
    <updated>2021-11-11T18:48:20.517Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h3><blockquote><p>使用filter函数，求0-50以内（包括50）的偶数<br>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44,46, 48, 50]</p></blockquote><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><ol><li>定义use_filter函数</li><li>函数体内：实现过滤偶数值的功能</li></ol><h4 id="任务提示"><a href="#任务提示" class="headerlink" title="任务提示"></a>任务提示</h4><ul><li>使用变量data接收0-50（包含50）的数字，即list(range(51))</li></ul><h4 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_filter</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 使用result接收filter过滤偶数值的功能</span></span><br><span class="line">    result =</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用data接收0-50的数值</span></span><br><span class="line">    data =</span><br><span class="line">    <span class="comment"># 调用use_filter函数传入data,使用result变量接收</span></span><br><span class="line">    result =</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure><h4 id="代码提交区"><a href="#代码提交区" class="headerlink" title="代码提交区"></a>代码提交区</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_filter</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 使用result接收filter过滤偶数值的功能</span></span><br><span class="line">    result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> n:n%<span class="number">2</span> == <span class="number">0</span>,data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用data接收0-50的数值</span></span><br><span class="line">    data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">51</span>))</span><br><span class="line">    <span class="comment"># 调用use_filter函数传入data,使用result变量接收</span></span><br><span class="line">    result = use_filter(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用前面所学知识&lt;br&gt;完成自己的任务。</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="编程练习" scheme="https://code.maylove.pub/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的高级函数(魔法函数)</title>
    <link href="https://code.maylove.pub/2021/ef7d290da2cb/"/>
    <id>https://code.maylove.pub/2021/ef7d290da2cb/</id>
    <published>2021-11-11T18:08:36.000Z</published>
    <updated>2021-11-11T18:16:34.368Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的高级函数-魔法函数"><a href="#Python中的高级函数-魔法函数" class="headerlink" title="Python中的高级函数(魔法函数)"></a>Python中的高级函数(魔法函数)</h3><ul><li>filter(内置函数)</li><li>map(内置函数)</li><li>reduce(曾经是内置函数)</li></ul><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>对循环根据过滤条件进行过滤</li></ul><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul><li><code>filter(func, list)</code></li></ul><h5 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>func</code>: 对list每个item进行条件过滤的定义</li><li><code>list</code> : 需要过滤的列表</li></ul><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul><li><code>res = filter(lambda x:x &gt; 1, [0,1,2])</code></li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ul><li><code>&lt;filter at 0x4f3af70&gt; -&gt; [1,2]</code></li></ul><hr><h4 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h4><h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><ul><li>对列表中的每个成员<code>是否满足条件</code>返回对应的<strong>True</strong>与<strong>False</strong></li></ul><h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><ul><li><code>map(func, list)</code></li></ul><h5 id="参数介绍-1"><a href="#参数介绍-1" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>func</code>: 对List每个item进行条件满足的判断</li><li><code>list</code>: 需要过滤的列表</li></ul><h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><ul><li><code>res = map(lambda x:x &gt; 1, [0,1,2])</code></li></ul><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><ul><li><code>&lt;map at 0x4f3af70&gt; -&gt; [False, False, True]</code></li></ul><hr><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a><code>reduce</code></h4><h5 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h5><ul><li>对循环前后两个数据进行累加</li></ul><h5 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h5><ul><li><code>reduce(func, list)</code></li></ul><h5 id="参数介绍-2"><a href="#参数介绍-2" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>func</code> : 对 数据累加的函数</li><li><code>list</code> : 需要处理的列表</li></ul><h5 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h5><ul><li><code>res = reduce(lambda x,y: x + y, [0,1,2])</code></li></ul><h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><ul><li>数字  <code>-&gt;</code> 3</li></ul><h5 id="reduce的导入"><a href="#reduce的导入" class="headerlink" title="reduce的导入"></a>reduce的导入</h5><ul><li><code>from functools import reduce</code></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">frunts = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="string">&#x27;e&#x27;</span> <span class="keyword">in</span> x, frunts)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="built_in">print</span>(frunts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_func</span>(<span class="params">item</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;e&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------&#x27;</span>)</span><br><span class="line">filter_result = <span class="built_in">filter</span>(filter_func, frunts)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(filter_result))</span><br><span class="line"></span><br><span class="line">map_result = <span class="built_in">map</span>(filter_func, frunts)  <span class="comment"># &gt; all</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(map_result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reduce_result = reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span>(reduce_result)</span><br><span class="line"></span><br><span class="line">reduce_result_str = reduce(<span class="keyword">lambda</span> x, y: x + y, frunts)</span><br><span class="line"><span class="built_in">print</span>(reduce_result_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;3个 Python中的高级函数(魔法函数) 分别是 filter,map,reduce</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://code.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的迭代器</title>
    <link href="https://code.maylove.pub/2021/d7eed8961f67/"/>
    <id>https://code.maylove.pub/2021/d7eed8961f67/</id>
    <published>2021-11-11T18:08:16.000Z</published>
    <updated>2021-11-11T18:15:43.094Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的迭代器"><a href="#Python中的迭代器" class="headerlink" title="Python中的迭代器"></a>Python中的迭代器</h3><h4 id="什么是迭代器"><a href="#什么是迭代器" class="headerlink" title="什么是迭代器"></a>什么是迭代器</h4><ul><li>同步进行(不需要等待所有数据都写入内存即可使用)</li></ul><h4 id="如何生成迭代器-iter"><a href="#如何生成迭代器-iter" class="headerlink" title="如何生成迭代器  - iter"></a>如何生成迭代器  - <code>iter</code></h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li>生成一个迭代对象</li></ul><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul><li><code>iter(iterable)</code></li></ul><h5 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>iterable</code> :  可迭代的数据类型</li></ul><h4 id="迭代器的用法-next"><a href="#迭代器的用法-next" class="headerlink" title="迭代器的用法   -  next"></a>迭代器的用法   - <code> next</code></h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><ul><li>返回迭代器中的数据</li></ul><h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><ul><li><code>next(iterator)</code></li></ul><h5 id="参数介绍-1"><a href="#参数介绍-1" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>iterator</code>: 迭代器对象</li></ul><h4 id="迭代器常用方法之生成迭代器"><a href="#迭代器常用方法之生成迭代器" class="headerlink" title="迭代器常用方法之生成迭代器"></a>迭代器常用方法之生成迭代器</h4><ul><li><p>for循环生成法—<code>yield</code></p></li><li><p>for循环一行生成迭代器</p></li></ul><h4 id="迭代器常用方法之for循环获取"><a href="#迭代器常用方法之for循环获取" class="headerlink" title="迭代器常用方法之for循环获取"></a>迭代器常用方法之for循环获取</h4><ul><li>(i for i range(10))</li><li>用完再用不会报错.</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">iter_obj = <span class="built_in">iter</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># print(next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(next(iter_obj))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(next(iter_obj))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_next</span>(<span class="params">iter_obj</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(iter_obj)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"><span class="comment"># print(_next(iter_obj))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_iter</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iter_obj = make_iter()</span><br><span class="line"><span class="comment"># print(type(iter_obj))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 执行后程序会空 , 拿不到数据</span></span><br><span class="line"></span><br><span class="line">iter_obj = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;========&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中迭代器的用法</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://code.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python python的随机模块--random</title>
    <link href="https://code.maylove.pub/2021/b22ca34c955f/"/>
    <id>https://code.maylove.pub/2021/b22ca34c955f/</id>
    <published>2021-11-11T18:08:02.000Z</published>
    <updated>2021-11-11T18:14:57.902Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="python的随机模块–random"><a href="#python的随机模块–random" class="headerlink" title="python的随机模块–random"></a>python的随机模块–<code>random</code></h3><ul><li><code>random.random</code><ul><li>模块名称.模块中的函数</li></ul></li><li><code>random.uniform</code></li><li><code>random.randint</code></li><li><code>random.choice</code></li><li><code>random.sample</code></li><li><code>random.randrange</code></li></ul><h4 id="random-random"><a href="#random-random" class="headerlink" title="random.random"></a>random.random</h4><ul><li>随机返回0~1之间的浮点数</li></ul><h4 id="random-uniform"><a href="#random-uniform" class="headerlink" title="random.uniform"></a>random.uniform</h4><ul><li>产生一个a,b区间的随机浮点数</li></ul><h4 id="random-randint"><a href="#random-randint" class="headerlink" title="random.randint"></a>random.randint</h4><ul><li>产生一个a, b区间的随机整数</li></ul><h4 id="random-choice"><a href="#random-choice" class="headerlink" title="random.choice"></a>random.choice</h4><ul><li>返回对象中的一个随机元素</li></ul><h4 id="random-sample"><a href="#random-sample" class="headerlink" title="random.sample"></a>random.sample</h4><ul><li><p>随机返回对象中指定的元素</p></li><li><p><code># 即个数</code></p></li></ul><h4 id="random-randrange"><a href="#random-randrange" class="headerlink" title="random.randrange"></a>random.randrange</h4><ul><li>获取区间内的一个随机数</li><li><code>random.randrange(0, 100, 1)</code>  # 区间,步长</li><li><code>random.choice(range(0, 100, 1))</code></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">gifts = [<span class="string">&#x27;iphone&#x27;</span>, <span class="string">&#x27;ipad&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;tv&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce_gifts</span>():</span></span><br><span class="line">    gift = random.choice(gifts)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你得到了%s&#x27;</span> % gift)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce_gift_new</span>():</span></span><br><span class="line">    count = random.randrange(<span class="number">0</span>, <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= count &lt;= <span class="number">50</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你中了一个iphone&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">50</span> &lt; count &lt;= <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你中了一个ipad&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">70</span> &lt; count &lt; <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你中了一个tv电视&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> count &gt;= <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;恭喜你中了一辆小汽车&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># chioce_gifts()</span></span><br><span class="line">    chioce_gift_new()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;python的随机模块--random</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://code.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的内置函数总结</title>
    <link href="https://code.maylove.pub/2021/fbe68b01bdf2/"/>
    <id>https://code.maylove.pub/2021/fbe68b01bdf2/</id>
    <published>2021-11-11T18:07:43.000Z</published>
    <updated>2021-11-11T18:14:14.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的内置函数总结"><a href="#Python中的内置函数总结" class="headerlink" title="Python中的内置函数总结"></a>Python中的内置函数总结</h3><ul><li>总结python的常用内置函数</li></ul><h4 id="常用函数1"><a href="#常用函数1" class="headerlink" title="常用函数1"></a>常用函数1</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>返回值</th><th>举例</th></tr></thead><tbody><tr><td><code>abs</code></td><td><strong>Number</strong></td><td>返回数字绝对值</td><td>正数字</td><td><code>abs(-10)</code></td></tr><tr><td><code>all</code></td><td><strong>List</strong></td><td>判断列表内容是否全是true</td><td>Bool</td><td><code>all([&#39;&#39;, &#39;123&#39;])</code></td></tr><tr><td><code>help</code></td><td><strong>object</strong></td><td>打印对象的用法</td><td>无</td><td><code>help(list)</code></td></tr><tr><td><code>enumerate</code></td><td><strong>iterable</strong></td><td>迭代时记录索引</td><td>无</td><td><code>for index, item in enumerate(list)</code></td></tr><tr><td><code>input</code></td><td><strong>Str</strong></td><td>命令行输入消息</td><td>Str</td><td><code>input(&#39;请输入信息:&#39;)</code></td></tr></tbody></table><h4 id="常用函数2"><a href="#常用函数2" class="headerlink" title="常用函数2"></a>常用函数2</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>返回值</th><th>举例</th></tr></thead><tbody><tr><td><code>isinstance</code></td><td>Object, type</td><td>判断对象是否是某种类型</td><td>Bool</td><td><code>isinstance(&#39;a&#39;, str)</code></td></tr><tr><td><code>type</code></td><td>Object</td><td>判断对象的类型</td><td>Str</td><td><code>type(10)</code></td></tr><tr><td><code>vars</code></td><td>instance</td><td>返回实例化的字典信息</td><td>dict</td><td></td></tr><tr><td><code>dir</code></td><td>object</td><td>返回对象中所有可用方法和属性</td><td>List</td><td><code>dir(&#39;asd&#39;)</code></td></tr><tr><td><code>hasattr</code></td><td>Obj, key</td><td>判断对象中是否有某个属性</td><td>Bool</td><td><code>hasattr(&#39;1&#39;, &#39;upper&#39;)</code></td></tr></tbody></table><h4 id="常用函数3"><a href="#常用函数3" class="headerlink" title="常用函数3"></a>常用函数3</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>返回值</th><th>举例</th></tr></thead><tbody><tr><td><code>setattr</code></td><td>Obj,key,value</td><td>为实例化对象添加属性与值</td><td>无</td><td><code>setattr(instance, &#39;run&#39;, &#39;jo&#39;)</code></td></tr><tr><td><code>gatattr</code></td><td>obj, key</td><td>通过对象获取属性</td><td>任何类型</td><td><code>getattr(obj, key)</code></td></tr><tr><td><code>any</code></td><td>Iterable</td><td>判断内容是否有True值</td><td>Bool</td><td><code>any([1, 0, &#39;&#39;])</code></td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># food = input(&#x27;你想吃什么呢:&#x27;)</span></span><br><span class="line"><span class="comment"># print(food)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # help(input)</span></span><br><span class="line"><span class="comment"># help(list)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = self.a</span><br><span class="line">        self.b = self.b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"><span class="built_in">print</span>(test.a)</span><br><span class="line">result = <span class="built_in">vars</span>(test)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(test, <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(test, <span class="string">&#x27;c&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(<span class="built_in">list</span>, <span class="string">&#x27;append&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(<span class="built_in">list</span>, <span class="string">&#x27;appends&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(test, <span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(test.c)  <span class="comment"># 若存在, 会覆盖</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">vars</span>(test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># setattr((list, &#x27;c&#x27;, 1))  # 内置的类不可自定义属性</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(<span class="built_in">list</span>, <span class="string">&#x27;appends&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">getattr</span>(<span class="built_in">list</span>, <span class="string">&#x27;appends&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&#x27;&#x27;</span>, <span class="literal">None</span>, <span class="literal">True</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>(a))  <span class="comment"># &#x27;或&#x27; 的关系</span></span><br><span class="line"><span class="comment"># all - &gt; and</span></span><br><span class="line"><span class="comment"># any - &gt; or</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;很多常用的内置函数</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://code.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的虚拟环境</title>
    <link href="https://code.maylove.pub/2021/a3ebd6c062e7/"/>
    <id>https://code.maylove.pub/2021/a3ebd6c062e7/</id>
    <published>2021-11-11T18:07:29.000Z</published>
    <updated>2021-11-11T18:13:05.455Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的虚拟环境"><a href="#Python中的虚拟环境" class="headerlink" title="Python中的虚拟环境"></a>Python中的虚拟环境</h3><ul><li>认识虚拟环境</li><li>Python中的虚拟环境工具</li></ul><h4 id="认识虚拟环境"><a href="#认识虚拟环境" class="headerlink" title="认识虚拟环境"></a>认识虚拟环境</h4><ul><li>各个版本互不干扰,互不相等</li><li>python可能版本不同  系统环境不同</li><li>创建的每一个项目都是各自的虚拟环境</li></ul><h4 id="Python中的虚拟环境工具"><a href="#Python中的虚拟环境工具" class="headerlink" title="Python中的虚拟环境工具"></a>Python中的虚拟环境工具</h4><ul><li><code>Virtualenv</code></li><li><code>pyenv</code></li></ul><h4 id="virtualenv-另一个较为复杂"><a href="#virtualenv-另一个较为复杂" class="headerlink" title="virtualenv(另一个较为复杂)"></a><code>virtualenv</code>(另一个较为复杂)</h4><ul><li>命令行下使用</li><li><code>pip install virtualenv</code></li><li>选择目录</li><li><code>virtualenv -p python3 penv</code></li><li><code>./penv/bin/active</code></li><li>win系统可以<code>在bin文件夹下</code>输入<code>active</code>  <code>回车</code>*<em>进入虚拟环境</em></li><li><code>deacitve</code>(退出虚拟环境)</li></ul><blockquote><p>装这个插件…….Windows配置环境配置了半个多小时(想买mac或者重开成Linux了呜呜呜)</p></blockquote>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的虚拟环境</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://code.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的日志模块</title>
    <link href="https://code.maylove.pub/2021/58cc3eaec3ec/"/>
    <id>https://code.maylove.pub/2021/58cc3eaec3ec/</id>
    <published>2021-11-11T18:07:17.000Z</published>
    <updated>2021-11-11T18:12:29.807Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的日志模块"><a href="#Python中的日志模块" class="headerlink" title="Python中的日志模块"></a>Python中的日志模块</h3><h4 id="日志的作用"><a href="#日志的作用" class="headerlink" title="日志的作用"></a>日志的作用</h4><ul><li>日记</li><li>程序行为</li><li>重要信息记录</li></ul><h4 id="日志的等级"><a href="#日志的等级" class="headerlink" title="日志的等级"></a>日志的等级</h4><ul><li><code>debug</code></li><li><code>info</code></li><li><code>warning</code></li><li><code>error</code></li><li><code>critical</code></li></ul><h4 id="logging模块的使用"><a href="#logging模块的使用" class="headerlink" title="logging模块的使用"></a>logging模块的使用</h4><ul><li><code>logging.basicConfig</code></li></ul><table><thead><tr><th>参数名</th><th>作用</th><th>举例</th></tr></thead><tbody><tr><td><code>level</code></td><td>日志输出等级</td><td><code>level = logging.DEBUG</code></td></tr><tr><td><code>format</code></td><td>日志输出格式</td><td></td></tr><tr><td><code>filename</code></td><td>存储位置</td><td><code>filename = &#39;d://back.log&#39;</code></td></tr><tr><td><code>filemode</code></td><td>输入模式</td><td><code>filemode = &quot;w&quot;</code></td></tr></tbody></table><h5 id="format具体格式"><a href="#format具体格式" class="headerlink" title="format具体格式"></a>format具体格式</h5><table><thead><tr><th>格式符</th><th>含义</th></tr></thead><tbody><tr><td><code>%(levelname)s</code></td><td>日志级别名称</td></tr><tr><td><code>%(pathname)s</code></td><td>执行程序的路径</td></tr><tr><td><code>%(filename)s</code></td><td>执行程序名</td></tr><tr><td><code>%(lineno)d</code></td><td>日志的当前行号</td></tr><tr><td><code>%(asctime)s</code></td><td>打印日志的时间</td></tr><tr><td><code>%(message)s</code></td><td>日志信息</td></tr></tbody></table><ul><li><code>format = &#39;%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s&#39;</code></li><li>(常用的格式)</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_log</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        mode = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mode = <span class="string">&#x27;w&#x27;</span></span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(filename)s %(lineno)d %(levelname)s %(message)s&#x27;</span>,</span><br><span class="line">        filename=path,</span><br><span class="line">        filemode=mode</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">path = os.path.join(current_path, <span class="string">&#x27;back.log&#x27;</span>)</span><br><span class="line">log = init_log(path)</span><br><span class="line"><span class="comment"># log = init_log()</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;这是第一个记录的日志信息&#x27;</span>)</span><br><span class="line">log.warning(<span class="string">&#x27;这是一个警告&#x27;</span>)</span><br><span class="line">log.error(<span class="string">&#x27;这是一个重大的错误信息&#x27;</span>)</span><br><span class="line">log.debug(<span class="string">&#x27;这是一个debug&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的日志模块</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://code.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的加密工具</title>
    <link href="https://code.maylove.pub/2021/6bf1514df252/"/>
    <id>https://code.maylove.pub/2021/6bf1514df252/</id>
    <published>2021-11-11T18:07:00.000Z</published>
    <updated>2021-11-11T18:11:43.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的加密工具"><a href="#Python中的加密工具" class="headerlink" title="Python中的加密工具"></a>Python中的加密工具</h3><h4 id="hashlib模块介绍"><a href="#hashlib模块介绍" class="headerlink" title="hashlib模块介绍"></a>hashlib模块介绍</h4><ul><li>难破解</li><li>不可逆</li></ul><h4 id="hashlib模块中的常用方法"><a href="#hashlib模块中的常用方法" class="headerlink" title="hashlib模块中的常用方法"></a>hashlib模块中的常用方法</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>md5</code></td><td>byte</td><td>Md5算法加密</td><td><code>hashlib.md5(b&#39;hello&#39;)</code></td><td>Hash对象</td></tr><tr><td><code>sha1</code></td><td>byte</td><td>Sha1算法加密</td><td><code>hashlib.sha1(b&#39;hello&#39;)</code></td><td>Hash对象</td></tr><tr><td><code>sha256</code></td><td>byte</td><td>Sha256算法加密</td><td><code>hashlib.sha256(b&#39;hello&#39;)</code></td><td>Hash对象</td></tr><tr><td><code>sha512</code></td><td>byte</td><td>Sha512算法加密</td><td><code>hashlib.sha512(b&#39;hello&#39;)</code></td><td>Hash对象</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">base_sigh = <span class="string">&#x27;muke&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom</span>():</span></span><br><span class="line">    a_timestamp = <span class="built_in">int</span>(time.time())</span><br><span class="line">    _token = <span class="string">&#x27;%s%s&#x27;</span> % (base_sigh, a_timestamp)</span><br><span class="line">    <span class="comment"># print(_token, type(_token))</span></span><br><span class="line">    hashobj = hashlib.sha1(_token.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    a_token = hashobj.hexdigest()</span><br><span class="line">    <span class="comment"># print(a_token)</span></span><br><span class="line">    <span class="keyword">return</span> a_token, a_timestamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b_service_check</span>(<span class="params">token, timestamp</span>):</span></span><br><span class="line">    _token = <span class="string">&#x27;%s%s&#x27;</span> % (base_sigh, timestamp)</span><br><span class="line">    b_token = hashlib.sha1(_token.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> token == b_token:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    need_help_token, timestamp = custom()  <span class="comment"># 若只使用一个变量,则此处会生成一个元组传入其变量</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    result = b_service_check(need_help_token, <span class="built_in">int</span>(time.time()))</span><br><span class="line">    <span class="keyword">if</span> result == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;a合法,b服务可以进行帮助&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;a不合法,b不可进行帮助&#x27;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h4 id="base64模块介绍"><a href="#base64模块介绍" class="headerlink" title="base64模块介绍"></a>base64模块介绍</h4><ul><li>通用型</li><li>可解密</li></ul><h4 id="base64模块的常用方法"><a href="#base64模块的常用方法" class="headerlink" title="base64模块的常用方法"></a>base64模块的常用方法</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>encodestring</code></td><td>Byte</td><td>进行base64加密</td><td><code>base64.encodestring(b&#39;py&#39;)</code></td><td>Byte</td></tr><tr><td><code>decodingstring</code></td><td>Byte</td><td>对base64解密</td><td><code>base64.decodestring(b&#39;eGlhb211\n&#39;)</code></td><td>Byte</td></tr><tr><td><code>encodebytes</code>(推荐)</td><td>Byte</td><td>进行bese64加密</td><td><code>base64.encodebytes(b&#39;py&#39;)</code></td><td>Byte</td></tr><tr><td><code>decodingbytes</code>(推荐)</td><td>Byte</td><td>对base64解密</td><td><code>base64.decodebytes(b&#39;eGlhb211\n&#39;)</code></td><td>Byte</td></tr></tbody></table><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">replace_one = <span class="string">&#x27;%&#x27;</span></span><br><span class="line">replace_two = <span class="string">&#x27;$&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">        data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(data, <span class="built_in">bytes</span>):</span><br><span class="line">        data = data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;data need bytes or str&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    _data = base64.encodebytes(data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(_data)</span></span><br><span class="line">    _data = _data.replace(<span class="string">&#x27;a&#x27;</span>, replace_one).replace(<span class="string">&#x27;2&#x27;</span>, replace_two)</span><br><span class="line">    <span class="comment"># print(_data)</span></span><br><span class="line">    <span class="keyword">return</span> _data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data, <span class="built_in">bytes</span>):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;data need bytes&#x27;</span>)</span><br><span class="line">    replace_one_b = replace_one.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    replace_two_b = replace_two.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = data.replace(replace_one_b, <span class="string">b&#x27;a&#x27;</span>).replace(replace_two_b, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> base64.decodebytes(data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = encode(<span class="string">&#x27;hello xiaomu&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    new_result = decode(result.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(new_result)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的几种加密工具</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="常用函数" scheme="https://code.maylove.pub/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    <category term="高级函数" scheme="https://code.maylove.pub/tags/%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python Yaml文件的读取</title>
    <link href="https://code.maylove.pub/2021/46d82974b24c/"/>
    <id>https://code.maylove.pub/2021/46d82974b24c/</id>
    <published>2021-11-09T17:21:26.000Z</published>
    <updated>2021-11-09T17:44:03.137Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Yaml文件的读取"><a href="#Yaml文件的读取" class="headerlink" title="Yaml文件的读取"></a>Yaml文件的读取</h3><h4 id="yaml格式的介绍"><a href="#yaml格式的介绍" class="headerlink" title="yaml格式的介绍"></a>yaml格式的介绍</h4><ul><li><p>文本文件</p></li><li><p>服务器配置文件</p></li><li><p><code>xxx.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span></span><br><span class="line">  <span class="string">xiaomu</span></span><br><span class="line"><span class="attr">age:</span></span><br><span class="line">  <span class="number">10</span></span><br><span class="line"><span class="attr">xingqing:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">haha</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">heihei</span></span><br><span class="line"><span class="attr">new:</span></span><br><span class="line">  <span class="attr">a:</span> <span class="string">b</span></span><br><span class="line">  <span class="attr">c:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Python的第三方包—-pyyaml"><a href="#Python的第三方包—-pyyaml" class="headerlink" title="Python的第三方包—-pyyaml"></a>Python的第三方包—-pyyaml</h4><ul><li><code>pip install pyyaml</code></li><li><code>import yaml</code></li></ul><h4 id="读取yaml文件的方法"><a href="#读取yaml文件的方法" class="headerlink" title="读取yaml文件的方法"></a>读取yaml文件的方法</h4><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ol><li> <code>f = open(yaml_file, &#39;r&#39;)</code></li><li> <code>data = yaml.load(f.read())</code></li><li> <code>  f.close()</code></li></ol><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ul><li>字典类型</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    _result = yaml.load(data, Loader=yaml.FullLoader)</span><br><span class="line">    <span class="keyword">return</span> _result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = read(<span class="string">&#x27;muke.yaml&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result, <span class="built_in">type</span>(result))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(yaml))</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Yaml文件的基本用法</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="文件操作（IO）" scheme="https://code.maylove.pub/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88IO%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Python 序列化</title>
    <link href="https://code.maylove.pub/2021/1392ef5ea81f/"/>
    <id>https://code.maylove.pub/2021/1392ef5ea81f/</id>
    <published>2021-11-09T17:21:10.000Z</published>
    <updated>2021-11-09T17:28:48.541Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h4 id="初识序列化与反序列化"><a href="#初识序列化与反序列化" class="headerlink" title="初识序列化与反序列化"></a>初识序列化与反序列化</h4><ul><li><code>对象信息</code>或<code>数据结构信息</code>通过<strong>转换</strong>达到<code>存储</code>或者<code>传输</code>的<strong>效果</strong></li><li>可以用比特的编码与解码进行联想</li></ul><h4 id="可序列化的数据类型"><a href="#可序列化的数据类型" class="headerlink" title="可序列化的数据类型"></a>可序列化的数据类型</h4><ul><li><code>number</code></li><li><code>str</code></li><li><code>list</code></li><li><code>tuple</code></li><li><code>dict</code>  <strong>#  最常用的</strong></li></ul><h4 id="Python中的json模块"><a href="#Python中的json模块" class="headerlink" title="Python中的json模块"></a>Python中的<code>json模块</code></h4><table><thead><tr><th>方法名</th><th>参数</th><th>介绍</th><th>举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>dumps</code></td><td>obj</td><td>对象序列化</td><td><code>json.dumps([1,2])</code></td><td>字符串</td></tr><tr><td><code>loads</code></td><td>str</td><td>返序列化</td><td><code>Json.loads(&#39;[1,2,3]&#39;)</code></td><td>原始数据类型</td></tr></tbody></table><h4 id="Python中的pickle"><a href="#Python中的pickle" class="headerlink" title="Python中的pickle"></a>Python中的<code>pickle</code></h4><table><thead><tr><th>方法名</th><th>参数</th><th>介绍</th><th>举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>dumps</code></td><td>obj</td><td>对象序列化</td><td><code>pickle.dumps([1,2])</code></td><td>比特</td></tr><tr><td><code>loads</code></td><td>byte</td><td>返序列化</td><td><code>pickle.loads(&#39;[1, 2, 3]&#39;)</code></td><td>原始数据类型</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> json.loads(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">path, data</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">dict</span>):</span><br><span class="line">            _data = json.dumps(data)</span><br><span class="line">            f.write(_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;data is dict&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小慕&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;top&#x27;</span>: <span class="number">176</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># write(&#x27;test.json&#x27;, data)</span></span><br><span class="line">    result = read(<span class="string">&#x27;test.json&#x27;</span>)</span><br><span class="line">    result[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">    write(<span class="string">&#x27;test.json&#x27;</span>, result)</span><br><span class="line">    <span class="comment"># print(result, type(result))</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;序列化是什么已经 Json pickle</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="文件操作（IO）" scheme="https://code.maylove.pub/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88IO%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Python 文件的读取</title>
    <link href="https://code.maylove.pub/2021/c2a208ee7c21/"/>
    <id>https://code.maylove.pub/2021/c2a208ee7c21/</id>
    <published>2021-11-09T17:20:53.000Z</published>
    <updated>2021-11-09T17:27:53.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h3><h4 id="文件操作的模式之读取"><a href="#文件操作的模式之读取" class="headerlink" title="文件操作的模式之读取"></a>文件操作的模式之读取</h4><table><thead><tr><th>模式</th><th>介绍</th></tr></thead><tbody><tr><td><code>r</code></td><td>读取文件</td></tr><tr><td><code>rb</code></td><td>二进制形式读取文件</td></tr></tbody></table><h4 id="文件对象的操作模式之读"><a href="#文件对象的操作模式之读" class="headerlink" title="文件对象的操作模式之读"></a>文件对象的操作模式之读</h4><table><thead><tr><th>方法名</th><th>参数</th><th>介绍</th><th>举例</th></tr></thead><tbody><tr><td><code>read</code>(seed)</td><td>无</td><td>返回整个文件字符串</td><td><code>f.read()</code></td></tr><tr><td><code>readlines</code></td><td>无</td><td>返回文件列表</td><td><code>f.readlines()</code></td></tr><tr><td><code>readline</code></td><td>无</td><td>返回文件中的一行</td><td><code>f.readline()</code></td></tr><tr><td><code>mode</code></td><td>无</td><td>文件模式</td><td><code>f.mode</code></td></tr><tr><td><code>name</code></td><td>无</td><td>返回文件名称</td><td><code>f.name</code></td></tr><tr><td><code>closed</code></td><td>无</td><td>文件是否关闭</td><td><code>f.closed</code></td></tr></tbody></table><ul><li><p>操作完成后,<code>必须使用close方法</code>!!</p></li><li><p><code>with函数</code></p></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_package</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;%s 已经存在不可创建&#x27;</span> % path)</span><br><span class="line">    os.makedirs(path)</span><br><span class="line">    init_path = os.path.join(path, <span class="string">&#x27;__init__.py&#x27;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(init_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;# coding:utf-8\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, path, mode=<span class="string">&#x27;w&#x27;</span>, is_return=<span class="literal">True</span></span>):</span></span><br><span class="line">        self.path = path</span><br><span class="line">        self.mode = mode</span><br><span class="line">        self.is_return = is_return</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        f = <span class="built_in">open</span>(self.path, mode=self.mode)</span><br><span class="line">        <span class="keyword">if</span> self.is_return:</span><br><span class="line">            message = <span class="string">&#x27;%s\n&#x27;</span> % message</span><br><span class="line">        f.write(message)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self, is_strip=<span class="literal">True</span></span>):</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.path, mode=self.mode) <span class="keyword">as</span> f:</span><br><span class="line">            _data = f.readlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> _data:</span><br><span class="line">            <span class="keyword">if</span> is_strip:</span><br><span class="line">                temp = line.strip()</span><br><span class="line">                <span class="keyword">if</span> temp != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    result.append(temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> line != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    result.append(line)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    current_path = os.getcwd()</span><br><span class="line">    <span class="comment"># path = os.path.join(current_path, &#x27;test1&#x27;)</span></span><br><span class="line">    <span class="comment"># create_package(path)</span></span><br><span class="line">    <span class="comment"># open_path = os.path.join(current_path, &#x27;b.txt&#x27;)</span></span><br><span class="line">    o = Open(<span class="string">&#x27;package_datetime.py&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="comment"># o.write(&#x27;你好 小慕&#x27;)</span></span><br><span class="line">    <span class="comment"># data = o.read(is_strip=False)</span></span><br><span class="line">    data = o.read()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;文件的读取</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="文件操作（IO）" scheme="https://code.maylove.pub/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88IO%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Python 文件的创建和写入</title>
    <link href="https://code.maylove.pub/2021/d82afbbe5880/"/>
    <id>https://code.maylove.pub/2021/d82afbbe5880/</id>
    <published>2021-11-09T17:20:38.000Z</published>
    <updated>2021-11-09T17:28:04.577Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="文件的创建和写入"><a href="#文件的创建和写入" class="headerlink" title="文件的创建和写入"></a>文件的创建和写入</h3><h4 id="利用内置函数open获取文件对象"><a href="#利用内置函数open获取文件对象" class="headerlink" title="利用内置函数open获取文件对象"></a>利用内置函数open获取文件对象</h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>生成文件对象，进行创建，读写操作</li></ul><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul><li><code>open(path, mode)</code></li></ul><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><ul><li><code>path</code>：文件路径</li><li><code>mode</code>：操作模式</li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ul><li><strong>文件对象</strong></li></ul><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul><li><code>f = open(&#39;d://a.txt&#39;, &#39;w&#39;)</code></li></ul><h4 id="文件操作的模式之写入"><a href="#文件操作的模式之写入" class="headerlink" title="文件操作的模式之写入"></a>文件操作的模式之写入</h4><table><thead><tr><th>模式</th><th>介绍</th></tr></thead><tbody><tr><td><code>w</code></td><td>创建文件</td></tr><tr><td><code>w+</code></td><td>创建文件并读取文件</td></tr><tr><td><code>wb</code></td><td>二进制形式创建文件</td></tr><tr><td><code>wb+</code></td><td>二进制形式创建或追加内容</td></tr><tr><td><code>a</code></td><td>追加内容</td></tr><tr><td><code>a+</code></td><td>读写模式的追加</td></tr><tr><td><code>ab+</code></td><td>二进制形式读写追加</td></tr></tbody></table><h4 id="文件对象的操作方式之写入保存"><a href="#文件对象的操作方式之写入保存" class="headerlink" title="文件对象的操作方式之写入保存"></a>文件对象的操作方式之写入保存</h4><table><thead><tr><th>方法名</th><th>参数</th><th>介绍</th><th>举例</th></tr></thead><tbody><tr><td>write</td><td>Message</td><td>写入信息</td><td>f.write(‘hello\n’)</td></tr><tr><td>writelines</td><td>Message_list</td><td>批量写入</td><td>f.writelines([‘hello\n’, ‘world\n’])</td></tr><tr><td>close</td><td>无</td><td>关闭并保存文件</td><td>f.close()</td></tr></tbody></table><ul><li>操作完成后，必须使用close方法！</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_package</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;%s 已经存在不可创建&#x27;</span> % path)</span><br><span class="line">    os.makedirs(path)</span><br><span class="line">    init_path = os.path.join(path, <span class="string">&#x27;__init__.py&#x27;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(init_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;# coding:utf-8\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, path, mode=<span class="string">&#x27;w&#x27;</span>, is_retern=<span class="literal">True</span></span>):</span></span><br><span class="line">        self.path = path</span><br><span class="line">        self.mode = mode</span><br><span class="line">        self.is_retern = is_retern</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        f = <span class="built_in">open</span>(self.path, mode=self.mode)</span><br><span class="line">        <span class="keyword">if</span> self.is_retern:</span><br><span class="line">            message = <span class="string">&#x27;%s\n&#x27;</span> % message</span><br><span class="line">        f.write(message)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    current_path = os.getcwd()</span><br><span class="line">    <span class="comment"># path = os.path.join(current_path, &#x27;test1&#x27;)</span></span><br><span class="line">    <span class="comment"># create_package(path)</span></span><br><span class="line">    open_path = os.path.join(current_path, <span class="string">&#x27;b.txt&#x27;</span>)</span><br><span class="line">    o = Open(open_path)</span><br><span class="line">    o.write(<span class="string">&#x27;你好 小慕&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;文件的创建和写入</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="文件操作（IO）" scheme="https://code.maylove.pub/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88IO%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的sys模块</title>
    <link href="https://code.maylove.pub/2021/78aeb3436f5b/"/>
    <id>https://code.maylove.pub/2021/78aeb3436f5b/</id>
    <published>2021-11-09T17:20:24.000Z</published>
    <updated>2021-11-09T17:39:21.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的sys模块"><a href="#Python中的sys模块" class="headerlink" title="Python中的sys模块"></a>Python中的sys模块</h3><h4 id="sys中的常用方法"><a href="#sys中的常用方法" class="headerlink" title="sys中的常用方法"></a>sys中的常用方法</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>modules</code></td><td>无</td><td>Py启动时加载的模块</td><td><code>sys.modules( )</code></td><td>列表</td></tr><tr><td><code>path</code></td><td>无</td><td>返回当前py的环境路径</td><td><code>sys.path()</code></td><td>列表</td></tr><tr><td><code>exit</code></td><td><code>arg</code></td><td>退出程序</td><td><code>sys.exit(0)</code></td><td>无</td></tr><tr><td><code>getdefaultencoding</code></td><td>无</td><td>获取系统编码</td><td><code>sys.getdefaultencoding()</code></td><td>字符串</td></tr><tr><td><code>platform</code></td><td>无</td><td>获取当前系统平台</td><td><code>sys.platform()</code></td><td>字符串</td></tr><tr><td><code>version(属性)</code></td><td>无</td><td>获取python版本</td><td><code>sys.version</code></td><td>字符串</td></tr><tr><td><code>argv</code></td><td><code>*args</code></td><td>程序外部获取参数</td><td><code>sys.argv</code></td><td>列表</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">command = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> command == <span class="string">&#x27;modules&#x27;</span>:</span><br><span class="line">    modules = sys.modules</span><br><span class="line">    <span class="built_in">print</span>(modules)</span><br><span class="line"><span class="keyword">elif</span> command == <span class="string">&#x27;path&#x27;</span>:</span><br><span class="line"><span class="comment"># sys.exit(1)</span></span><br><span class="line">    path = sys.path</span><br><span class="line">    <span class="built_in">print</span>(path)</span><br><span class="line"><span class="keyword">elif</span> command == <span class="string">&#x27;encoding&#x27;</span>:</span><br><span class="line">    code = sys.getdefaultencoding()</span><br><span class="line">    <span class="built_in">print</span>(code)</span><br><span class="line"><span class="keyword">elif</span> command == <span class="string">&#x27;platform&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(sys.platform)</span><br><span class="line"><span class="keyword">elif</span> command == <span class="string">&#x27;version&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(sys.version)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;not command&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(sys.argv)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python中的sys模块</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="模块和包" scheme="https://code.maylove.pub/tags/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Python Python的os包</title>
    <link href="https://code.maylove.pub/2021/7c5d8b079cde/"/>
    <id>https://code.maylove.pub/2021/7c5d8b079cde/</id>
    <published>2021-11-09T17:20:14.000Z</published>
    <updated>2021-11-09T17:22:11.984Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python的os包"><a href="#Python的os包" class="headerlink" title="Python的os包"></a>Python的os包</h3><h4 id="os的文件与目录函数介绍"><a href="#os的文件与目录函数介绍" class="headerlink" title="os的文件与目录函数介绍"></a>os的文件与目录函数介绍</h4><ul><li><code>import os</code></li></ul><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th align="left">举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>getcwd</code></td><td>无</td><td>返回当前的路径</td><td align="left">os.getcwd()</td><td>字符串</td></tr><tr><td><code>listdir</code></td><td>path</td><td>返回制定路径下所有的文件或文件夹</td><td align="left">os.listdir(‘c//Windows’)</td><td>返回一个列表</td></tr><tr><td><code>makedirs</code></td><td>Path mode</td><td>创建多级文件夹</td><td align="left">os.makedir(‘d//imooc/py’)</td><td>无</td></tr><tr><td><code>removedirs</code></td><td>path</td><td>删除多级文件夹</td><td align="left">os.removedirs(‘d://imooc/py’)</td><td>无</td></tr><tr><td><code>rename</code></td><td>Oldname newname</td><td>给文件或文件夹改名</td><td align="left">os.rename(‘d://imooc’, ‘d//imoc’)</td><td>无</td></tr><tr><td><code>rmdir</code></td><td>path</td><td>只能删除空文件夹</td><td align="left">os.rmdir(‘d://imooc’)</td><td>无</td></tr></tbody></table><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(current_path)</span><br><span class="line"></span><br><span class="line">new_path = <span class="string">&#x27;%s/test1&#x27;</span> % current_path</span><br><span class="line"><span class="comment"># os.makedirs(new_path)</span></span><br><span class="line"></span><br><span class="line">data = os.listdir(current_path)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">new_path2 = <span class="string">&#x27;%s/test2/abc&#x27;</span> % current_path</span><br><span class="line"><span class="comment"># os.makedirs(new_path2)</span></span><br><span class="line"><span class="comment"># os.makedirs(&#x27;test3&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.removedirs(&#x27;test2/abc&#x27;)</span></span><br><span class="line"><span class="comment"># os.rename(&#x27;test3&#x27;, &#x27;test3_new&#x27;)</span></span><br><span class="line"><span class="comment"># os.rename(&#x27;test1.py&#x27;, &#x27;python_test1.py&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.rmdir(&#x27;%s/test3_new&#x27; % current_path)</span></span><br><span class="line">os.rmdir(<span class="string">&#x27;test1&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="os-path模块常用函数介绍"><a href="#os-path模块常用函数介绍" class="headerlink" title="os.path模块常用函数介绍"></a>os.path模块常用函数介绍</h4><table><thead><tr><th>函数名</th><th>参数</th><th>介绍</th><th>举例</th><th>返回值</th></tr></thead><tbody><tr><td><code>exists</code></td><td>Path</td><td>文件或路径是否存在</td><td><code>os.path.exists(&#39;d://&#39;)</code></td><td>bool类型</td></tr><tr><td><code>isdir</code></td><td>Path</td><td>是否是路径</td><td><code>os.path.isdir(&#39;d://&#39;)</code></td><td>bool类型</td></tr><tr><td><code>isabs</code></td><td>Path</td><td>是否是绝对路径</td><td><code>os.path.isabs(&#39;test&#39;)</code></td><td>bool类型</td></tr><tr><td><code>isfile</code></td><td>Path</td><td>是否是文件</td><td><code>os.path.isfile(&#39;d://a.py&#39;)</code></td><td>bool类型</td></tr><tr><td><code>join</code></td><td>Path, path*</td><td>路径字符串合并</td><td><code>os.path.join(&#39;d://&#39;, &#39;test&#39;)</code></td><td>字符串</td></tr><tr><td><code>split</code></td><td>Path</td><td>以最后以层路径为基准切割</td><td><code>os.path.split(&#39;d://test&#39;)</code></td><td>列表</td></tr></tbody></table><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(current_path)</span><br><span class="line"><span class="built_in">print</span>(os.path.isabs(current_path))</span><br><span class="line"><span class="built_in">print</span>(os.path.isabs(<span class="string">&#x27;animal&#x27;</span>))</span><br><span class="line"></span><br><span class="line">new_path = <span class="string">&#x27;%s/test1&#x27;</span> % current_path</span><br><span class="line"><span class="keyword">if</span> os.path.exists(new_path):</span><br><span class="line">    os.makedirs(new_path)</span><br><span class="line"></span><br><span class="line">data = os.listdir(current_path)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">new_path2 = os.path.join(current_path, <span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_path2)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(new_path2):</span><br><span class="line">    os.makedirs(new_path2)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&#x27;test3&#x27;</span>):</span><br><span class="line">    os.makedirs(<span class="string">&#x27;test3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&#x27;test2/abc&#x27;</span>):</span><br><span class="line">    os.removedirs(<span class="string">&#x27;test2/abc&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&#x27;test3&#x27;</span>):</span><br><span class="line">    os.rename(<span class="string">&#x27;test3&#x27;</span>, <span class="string">&#x27;test3_new&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&#x27;test1.py&#x27;</span>):</span><br><span class="line">    os.rename(<span class="string">&#x27;test1.py&#x27;</span>, <span class="string">&#x27;python_test1.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&#x27;%s/test3_new&#x27;</span>):</span><br><span class="line">    os.rmdir(<span class="string">&#x27;%s/test3_new&#x27;</span> % current_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&#x27;test1&#x27;</span>):</span><br><span class="line">    os.rmdir(<span class="string">&#x27;test1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(os))</span><br><span class="line"></span><br><span class="line">current_path = current_path + <span class="string">&#x27;/package_os.py&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(current_path))</span><br><span class="line"><span class="built_in">print</span>(os.path.split(current_path))</span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(os.path.split(current_path)[<span class="number">0</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;Python的os包</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="模块和包" scheme="https://code.maylove.pub/tags/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Python Python中的时间包2  time模块</title>
    <link href="https://code.maylove.pub/2021/564442f53b07/"/>
    <id>https://code.maylove.pub/2021/564442f53b07/</id>
    <published>2021-11-07T16:33:03.000Z</published>
    <updated>2021-11-08T03:15:56.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python中的时间包2time模块"><a href="#Python中的时间包2time模块" class="headerlink" title="Python中的时间包2time模块"></a>Python中的时间包2<code>time模块</code></h3><ul><li>认识时间戳</li><li>认识python的<code>time模块</code>与常用方法</li><li><code>datetime</code>包生成的时间戳与时间戳转时间类型的方法</li></ul><h4 id="认识时间戳"><a href="#认识时间戳" class="headerlink" title="认识时间戳"></a>认识时间戳</h4><ul><li>1970年1月1日00时00分00秒至今的总毫秒（秒）数</li><li><code>timestamp</code></li><li><code>float</code></li></ul><h4 id="time模块与它的函数们"><a href="#time模块与它的函数们" class="headerlink" title="time模块与它的函数们"></a>time模块与它的函数们</h4><ul><li>时间处理，转换时间格式</li><li>生成时间戳函数<code>time</code></li><li>获取本地时间函数<code>localtime</code></li><li><code>localtime</code>对应字段介绍</li><li>暂停函数<code>sleep</code></li><li><code>time</code>中的<code>strftime</code>与<code>strptime</code></li></ul><h4 id="生成时间戳函数time"><a href="#生成时间戳函数time" class="headerlink" title="生成时间戳函数time"></a>生成时间戳函数<code>time</code></h4><h5 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h5><ul><li><code>import time</code></li></ul><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ul><li><code>time.time()</code></li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ul><li><strong>秒级别</strong>的<code>浮点类型</code></li></ul><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul><li><code>1580878485.4009378</code></li></ul><h4 id="获取本地时间函数-localtime"><a href="#获取本地时间函数-localtime" class="headerlink" title="获取本地时间函数 localtime"></a>获取本地时间函数 <code>localtime</code></h4><h5 id="导入包-1"><a href="#导入包-1" class="headerlink" title="导入包"></a>导入包</h5><ul><li><code>import time</code></li></ul><h5 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h5><ul><li><code>time.localtime(timestamp)</code></li></ul><h5 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>timestamp</code> :  时间戳（可不传）</li></ul><h4 id="localtime对应字段介绍"><a href="#localtime对应字段介绍" class="headerlink" title="localtime对应字段介绍"></a>localtime对应字段介绍</h4><table><thead><tr><th>属性名</th><th align="left">介绍</th><th>取值范围</th></tr></thead><tbody><tr><td><code>tm_year</code></td><td align="left">四位数年</td><td>示例：2021</td></tr><tr><td><code>tm_mom</code></td><td align="left">月</td><td>1~12</td></tr><tr><td><code>tm_mday</code></td><td align="left">日</td><td>1~31</td></tr><tr><td><code>tm_hour</code></td><td align="left">小时</td><td>0~23</td></tr><tr><td><code>tm_min</code></td><td align="left">分钟</td><td>0~59</td></tr><tr><td><code>tm_sec</code></td><td align="left">秒</td><td>0~61（依然是闰月问题）</td></tr><tr><td><code>tm_wday</code></td><td align="left">一周的第一天</td><td>0~6（0是周一）</td></tr><tr><td><code>tm_yday</code></td><td align="left">一年的第几日</td><td>1~366（儒略历）</td></tr><tr><td><code>tm_isdat</code></td><td align="left">夏令时</td><td>-1, 0, 1是否是夏令时</td></tr></tbody></table><h4 id="暂停函数sleep"><a href="#暂停函数sleep" class="headerlink" title="暂停函数sleep"></a>暂停函数<code>sleep</code></h4><h5 id="导入包-2"><a href="#导入包-2" class="headerlink" title="导入包"></a>导入包</h5><ul><li><code>import time</code></li></ul><h5 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h5><ul><li><code>time.sleep(second)</code></li></ul><h5 id="参数介绍-1"><a href="#参数介绍-1" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>second</code> :  希望程序被暂停的秒数</li></ul><h4 id="time中的strftime"><a href="#time中的strftime" class="headerlink" title="time中的strftime"></a><code>time</code>中的<code>strftime</code></h4><h5 id="导入包-3"><a href="#导入包-3" class="headerlink" title="导入包"></a>导入包</h5><ul><li><code>import time</code></li></ul><h5 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h5><ul><li><code>time.strftime(format, t)</code></li></ul><h5 id="参数介绍-2"><a href="#参数介绍-2" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>format</code>： 格式化规范</li><li><code>t</code>：<code>time.localtime</code>对应的时间类型</li></ul><h4 id="time中的strptime"><a href="#time中的strptime" class="headerlink" title="time中的strptime"></a><code>time</code>中的<code>strptime</code></h4><h5 id="导入包-4"><a href="#导入包-4" class="headerlink" title="导入包"></a>导入包</h5><ul><li><code>import time</code></li></ul><h5 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h5><ul><li><code>time.strptime(time_str, format)</code></li></ul><h5 id="参数介绍-3"><a href="#参数介绍-3" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>time_str</code>:  符合时间格式的字符串</li><li><code>format</code>：确保与<code>time_str</code>一致的格式化标准</li></ul><h4 id="datetime中生成时间戳函数"><a href="#datetime中生成时间戳函数" class="headerlink" title="datetime中生成时间戳函数"></a>datetime中生成时间戳函数</h4><h5 id="导入包-5"><a href="#导入包-5" class="headerlink" title="导入包"></a>导入包</h5><ul><li><code>import datetime</code></li></ul><h5 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now = datetime.datetime.now()</span><br><span class="line">datetime.datetime.timestamp(now)</span><br></pre></td></tr></table></figure><h5 id="参数介绍-4"><a href="#参数介绍-4" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>now</code> ： datetime时间对象</li><li>秒级时间戳，浮点类型</li></ul><h4 id="datetime中时间戳转时间对象"><a href="#datetime中时间戳转时间对象" class="headerlink" title="datetime中时间戳转时间对象"></a>datetime中时间戳转时间对象</h4><h5 id="导入包-6"><a href="#导入包-6" class="headerlink" title="导入包"></a>导入包</h5><ul><li><code>import datetime</code></li></ul><h5 id="使用方法-6"><a href="#使用方法-6" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datetime.datetime.fromtimestamp(timestamp)</span><br></pre></td></tr></table></figure><h5 id="参数介绍-5"><a href="#参数介绍-5" class="headerlink" title="参数介绍"></a>参数介绍</h5><ul><li><code>timestamp</code> ： <strong>时间戳</strong></li></ul><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><ul><li><code>datetime</code>的<strong>日期对象</strong></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">now = time.time()</span><br><span class="line"><span class="built_in">print</span>(now, <span class="built_in">type</span>(now))</span><br><span class="line"></span><br><span class="line">time_obj = time.localtime(now)</span><br><span class="line"><span class="comment"># time.sleep(5)</span></span><br><span class="line"><span class="built_in">print</span>(time_obj, <span class="built_in">type</span>(time_obj))</span><br><span class="line"></span><br><span class="line">current_time_obj = time.localtime()</span><br><span class="line"><span class="built_in">print</span>(current_time_obj)</span><br><span class="line"></span><br><span class="line">before = now - <span class="number">100000</span></span><br><span class="line">before_time_obj = time.localtime(before)</span><br><span class="line"><span class="built_in">print</span>(before_time_obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time() * <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(10):</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"></span><br><span class="line">datetime_now = datetime.datetime.now()</span><br><span class="line">datetime_timestamp = datetime.datetime.timestamp(datetime_now)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;datetime 生成的时间戳 %s&#x27;</span> % datetime_timestamp)</span><br><span class="line"></span><br><span class="line">datetime_obj = datetime.datetime.fromtimestamp(datetime_timestamp)</span><br><span class="line"><span class="built_in">print</span>(datetime_obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本节课主要学习了&lt;br&gt;time模块的使用（什么是时间戳）以及datetime的补充</summary>
    
    
    
    <category term="Python" scheme="https://code.maylove.pub/categories/Python/"/>
    
    
    <category term="模块和包" scheme="https://code.maylove.pub/tags/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    
  </entry>
  
</feed>
